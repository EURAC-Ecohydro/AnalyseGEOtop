namezones <- c()
for (namefile in filesIN)
{
nr_char <- nchar(filesIN)
names(nr_char) <- filesIN
namezone <- strsplit(substr(namefile,1,nr_char[namefile]-4), "_")[[1]][2]
namezones <- c(namezones, namezone)
}
# list of arguments
args <- list("cutoff"=cutoff, "anis_deg"=anis_deg,"anis_ax"=anis_ax,"psill"=psill,
"nugget"=nugget,"nmax"=nmax,"nmin"=nmin,"idp"=idp)
# assing argument names to parameter value (named vector)
for (arg in 1:length(args))
{
x <- args[[arg]]
if (length(x)==length(namezones)) {
names(x) <- namezones
assign(x = names(args)[arg], value = x)
} else {
print(paste("argument",  names(args)[arg], "is not given with name of investigated zone and differs in length from input .csv files in the folder", datafolder, ". Please check!", sep=" " ))
}
}
}
val_list <- list()
nr_char <- nchar(filesIN)
names(nr_char) <- filesIN
namezone <- strsplit(substr(namefile,1,nr_char[namefile]-4), "_")[[1]][2]
print(paste("processing zone", namezone, sep=" "))
# read table
worktab <- read.table(file = file.path(wpath, datafolder, namefile), header = TRUE, sep = ",", dec = ".")
if (method=="ordinary") {
var_names <- "VARIABLE"; choose <- variable
}
if (method=="universal") {
var_names <- c("VARIABLE")
for (i in 1:length(add_vars)) var_names <- c(var_names, paste("add_var",i, sep="_"))
choose <- c(variable, add_vars)
}
worktab <- cbind(worktab$x_Coord,worktab$y_Coord,worktab[,choose])
# matrix 2 data.frame
worktab <- as.data.frame(worktab)
# rename cols
names(worktab) <- c("X","Y", var_names)
# zeros
worktab[worktab$VARIABLE <= 0,"VARIABLE"] <- 0.001
inverseDistWeigths
if (method == "ordinary")
my_var <- variogram(log(VARIABLE)~1, data=worktab, locations = ~X+Y, cutoff = cutoff[namezone])
if (method == "universal")
{
if (length(var_names==2))
my_var <- variogram(log(VARIABLE)~add_var_1,
data=worktab, locations = ~X+Y, cutoff = cutoff[namezone])
if (length(var_names==3))
my_var <- variogram(log(VARIABLE)~add_var_1 + add_var_2,
data=worktab, locations = ~X+Y, cutoff = cutoff[namezone])
if (length(var_names==4))
my_var <- variogram(log(VARIABLE)~add_var_1 + add_var_2 + add_var_3,
data=worktab, locations = ~X+Y, cutoff = cutoff[namezone])
}
method
var_names
length(var_names
# gstatVariogram - Calculate Sample variogram
if (method == "ordinary")
my_var <- variogram(log(VARIABLE)~1, data=worktab, locations = ~X+Y, cutoff = cutoff[namezone])
if (method == "universal")
{
if (length(var_names)==2))
my_var <- variogram(log(VARIABLE)~add_var_1,
data=worktab, locations = ~X+Y, cutoff = cutoff[namezone])
if (length(var_names)==3))
my_var <- variogram(log(VARIABLE)~add_var_1 + add_var_2,
data=worktab, locations = ~X+Y, cutoff = cutoff[namezone])
if (length(var_names)==4))
my_var <- variogram(log(VARIABLE)~add_var_1 + add_var_2 + add_var_3,
data=worktab, locations = ~X+Y, cutoff = cutoff[namezone])
}
# gstatVariogram - Calculate Sample variogram
if (method == "ordinary")
my_var <- variogram(log(VARIABLE)~1, data=worktab, locations = ~X+Y, cutoff = cutoff[namezone])
if (method == "universal")
{
if (length(var_names)==2)
my_var <- variogram(log(VARIABLE)~add_var_1,
data=worktab, locations = ~X+Y, cutoff = cutoff[namezone])
if (length(var_names)==3)
my_var <- variogram(log(VARIABLE)~add_var_1 + add_var_2,
data=worktab, locations = ~X+Y, cutoff = cutoff[namezone])
if (length(var_names)==4)
my_var <- variogram(log(VARIABLE)~add_var_1 + add_var_2 + add_var_3,
data=worktab, locations = ~X+Y, cutoff = cutoff[namezone])
}
m <- vgm(psill = psill[namezone], model = model, range = cutoff[namezone], nugget = nugget[namezone],
anis = c(anis_deg[namezone], anis_ax[namezone]))
model="sph"
m <- vgm(psill = psill[namezone], model = model, range = cutoff[namezone], nugget = nugget[namezone],
anis = c(anis_deg[namezone], anis_ax[namezone]))
?vgm
model="Sph"
m <- vgm(psill = psill[namezone], model = model, range = cutoff[namezone], nugget = nugget[namezone],
anis = c(anis_deg[namezone], anis_ax[namezone]))
my_var_fit <- fit.variogram(my_var, m)
my_var <- variogram(log(VARIABLE)~1,
data=worktab, locations = ~X+Y, cutoff = cutoff[namezone])
m <- vgm(psill = psill[namezone], model = model, range = cutoff[namezone], nugget = nugget[namezone],
anis = c(anis_deg[namezone], anis_ax[namezone]))
my_var_fit <- fit.variogram(my_var, m)
my_var <- variogram(log(VARIABLE)~add_var_1 + add_var_2,
data=worktab, locations = ~X+Y, cutoff = cutoff[namezone])
plot(my_var)
my_var <- variogram(log(VARIABLE)~1,
data=worktab, locations = ~X+Y, cutoff = cutoff[namezone])
plot(my_var)
my_var <- variogram(log(VARIABLE)~1,
data=worktab, locations = ~X+Y, cutoff = cutoff[namezone])
m <- vgm(psill = psill[namezone], model = model, range = cutoff[namezone], nugget = nugget[namezone],
anis = c(anis_deg[namezone], anis_ax[namezone]))
my_var_fit <- fit.variogram(my_var, m)
coordinates(worktab) <- ~X+Y
crs(worktab) <- coordsys
if (!is.na(rastermask)) {
# get raster mask
# 1 read in raster
mask <- raster(file.path(wpath, rastermask))
# crop mask to data extent
mask_A <- crop(mask,extent(worktab))
fac <- round(res(mask_A)[2]/npix,0)
# resample to npix
if (res(mask_A)[2] != npix)
{
mask_A <- disaggregate(mask_A, fact=fac, method='')
}
} else {
# 2 calculate convex hull for worktab data
ch <- chull(cbind(worktab@coords[,1],worktab@coords[,2]))
coords <- worktab@coords[c(ch, ch[1]), ]
# convert to Polygon
sp_poly <- SpatialPolygons(list(Polygons(list(Polygon(coords)), ID=1)))
# convert to raster
rast <- raster()
extent(rast) <- c(min(coords[,1]), max(coords[,1]), min(coords[,2]), max(coords[,2]))
res(rast) <- npix
mask_A <- rasterize(sp_poly, rast)
}
mask_sppxdf <- as(mask_A, "SpatialPixelsDataFrame")
crs(mask_sppxdf) <- coordsys
source('~/GitHub/SpatialInterpol/R/OrdKrig.R', echo=TRUE)
krig_ord_global <- OrdKrig(wpath = "/home/jbre/Schreibtisch/krig_SMC/", datafolder = "master", rastermask = NA,
inverseDistWeigths = F, local = F, method = "ordinary",
variable = "SoilMoisture_mean", npix = 1, cutoff = 20, anis_deg = 0, anis_ax = .5,
psill = 1, nugget = 1, nmax = 20, nmin = 2, omax = 0)
plot(krig_ord_global$P2$map_pred)
krig_uni_global <- OrdKrig(wpath = "/home/jbre/Schreibtisch/krig_SMC/", datafolder = "master", rastermask = NA,
inverseDistWeigths = F, local = F, method = "universal", add_vars = "slope",
variable = "SoilMoisture_mean", npix = 1, cutoff = 20, anis_deg = 0, anis_ax = .5,
psill = 1, nugget = 1, nmax = 20, nmin = 2, omax = 0)
method
filesIN <- dir(file.path(wpath, datafolder))
if (is.null(names(cutoff)))
{
# get namezones according to input files
namezones <- c()
for (namefile in filesIN)
{
nr_char <- nchar(filesIN)
names(nr_char) <- filesIN
namezone <- strsplit(substr(namefile,1,nr_char[namefile]-4), "_")[[1]][2]
namezones <- c(namezones, namezone)
}
# list of arguments
args <- list("cutoff"=cutoff, "anis_deg"=anis_deg,"anis_ax"=anis_ax,"psill"=psill,
"nugget"=nugget,"nmax"=nmax,"nmin"=nmin,"idp"=idp)
# assing argument names to parameter value (named vector)
for (arg in 1:length(args))
{
x <- args[[arg]]
if (length(x)==length(namezones)) {
names(x) <- namezones
assign(x = names(args)[arg], value = x)
} else {
print(paste("argument",  names(args)[arg], "is not given with name of investigated zone and differs in length from input .csv files in the folder", datafolder, ". Please check!", sep=" " ))
}
}
}
val_list <- list()
namefile
nr_char <- nchar(filesIN)
names(nr_char) <- filesIN
namezone <- strsplit(substr(namefile,1,nr_char[namefile]-4), "_")[[1]][2]
print(paste("processing zone", namezone, sep=" "))
# read table
worktab <- read.table(file = file.path(wpath, datafolder, namefile), header = TRUE, sep = ",", dec = ".")
if (method=="ordinary") {
var_names <- "VARIABLE"; choose <- variable
}
if (method=="universal") {
var_names <- c("VARIABLE")
for (i in 1:length(add_vars)) var_names <- c(var_names, paste("add_var",i, sep="_"))
choose <- c(variable, add_vars)
}
worktab <- cbind(worktab$x_Coord,worktab$y_Coord,worktab[,choose])
# matrix 2 data.frame
worktab <- as.data.frame(worktab)
# rename cols
names(worktab) <- c("X","Y", var_names)
# zeros
worktab[worktab$VARIABLE <= 0,"VARIABLE"] <- 0.001
str(worktab)
var_names
?krige
source('~/GitHub/SpatialInterpol/R/OrdKrig.R', echo=TRUE)
krig_uni_global <- OrdKrig(wpath = "/home/jbre/Schreibtisch/krig_SMC/", datafolder = "master", rastermask = NA,
inverseDistWeigths = F, local = F, method = "universal", add_vars = "slope",
variable = "SoilMoisture_mean", npix = 1, cutoff = 20, anis_deg = 0, anis_ax = .5,
psill = 1, nugget = 1, nmax = 20, nmin = 2, omax = 0)
source('~/GitHub/SpatialInterpol/R/OrdKrig.R', echo=TRUE)
krig_uni_global <- OrdKrig(wpath = "/home/jbre/Schreibtisch/krig_SMC/", datafolder = "master", rastermask = NA,
inverseDistWeigths = F, local = F, method = "universal", add_vars = "slope",
variable = "SoilMoisture_mean", npix = 1, cutoff = 20, anis_deg = 0, anis_ax = .5,
psill = 1, nugget = 1, nmax = 20, nmin = 2, omax = 0)
source('~/GitHub/SpatialInterpol/R/OrdKrig.R', echo=TRUE)
krig_uni_global <- OrdKrig(wpath = "/home/jbre/Schreibtisch/krig_SMC/", datafolder = "master", rastermask = NA,
inverseDistWeigths = F, local = F, method = "universal", add_vars = "slope",
variable = "SoilMoisture_mean", npix = 1, cutoff = 20, anis_deg = 0, anis_ax = .5,
psill = 1, nugget = 1, nmax = 20, nmin = 2, omax = 0)
source('~/GitHub/SpatialInterpol/R/OrdKrig.R', echo=TRUE)
krig_uni_global <- OrdKrig(wpath = "/home/jbre/Schreibtisch/krig_SMC/", datafolder = "master", rastermask = NA,
inverseDistWeigths = F, local = F, method = "universal", add_vars = "slope",
variable = "SoilMoisture_mean", npix = 1, cutoff = 20, anis_deg = 0, anis_ax = .5,
psill = 1, nugget = 1, nmax = 20, nmin = 2, omax = 0)
source('~/GitHub/SpatialInterpol/R/OrdKrig.R', echo=TRUE)
krig_uni_global <- OrdKrig(wpath = "/home/jbre/Schreibtisch/krig_SMC/", datafolder = "master", rastermask = NA,
inverseDistWeigths = F, local = F, method = "universal", add_vars = "slope",
variable = "SoilMoisture_mean", npix = 1, cutoff = 20, anis_deg = 0, anis_ax = .5,
psill = 1, nugget = 1, nmax = 20, nmin = 2, omax = 0)
source('~/GitHub/SpatialInterpol/R/OrdKrig.R', echo=TRUE)
krig_uni_global <- OrdKrig(wpath = "/home/jbre/Schreibtisch/krig_SMC/", datafolder = "master", rastermask = NA,
inverseDistWeigths = F, local = F, method = "universal", add_vars = "slope",
variable = "SoilMoisture_mean", npix = 1, cutoff = 20, anis_deg = 0, anis_ax = .5,
psill = 1, nugget = 1, nmax = 20, nmin = 2, omax = 0)
str(worktab)
coordinates(worktab) <- ~X+Y
crs(worktab) <- coordsys
coordinates(worktab) <- ~X+Y
str(worktab)
str( worktab@data)
library()
library(soilwater)
?swc
library(DataBaseAlpEnvEURAC)
?dB_readStationData
path <- "/media/alpenv/Projekte/MONALISA/05_Arbeitsbereiche/BrJ/01_data/Stations_MONALISA/NEMEF/NEMEF1500/"
header.file = "/media/alpenv/Projekte/MONALISA/05_Arbeitsbereiche/BrJ/01_data/Stations_MONALISA/NEMEF/header_NEMEF1500.txt"
station = "NEMEF1500"
files <- dir(path)
files <- dir(path)
files
header <- as.character(read.table(header.file, header=FALSE, sep=",")[,1])
header_org <- header
header
station_gen <- substr(station,1,nchar(station)-4)
station_gen
if (station_gen=="BERAT") {
skip <- 1; date_col=2; tz="Etc/GMT+1"; time_step=times("00:05:00")
} else time_step <- times("00:15:00")
if (station_gen=="SF") {
skip <- 1; date_col=2; tz="Etc/GMT+1"
}
if (station_gen=="B") {
skip <- 4; date_col=1; tz="Etc/GMT-2"
header_final <- paste(substr(header.file, 1, nchar(header.file)-16), "header_final.txt", sep="")
header_final <- as.character(read.table(header_final, header=FALSE)[,1])
}
if (station_gen=="P"| station_gen=="I") {
skip <- 4; date_col=1; tz="Etc/GMT-1"
}
if (station_gen=="M" | station_gen=="S") {
skip <- 1; date_col=2; tz="Etc/GMT+1"
header_final <- paste(substr(header.file, 1, nchar(header.file)-16), "header_final.txt", sep="")
header_final <- as.character(read.table(header_final, header=FALSE)[,1])
}
if (station_gen=="XS") {
skip <- 1; date_col=2; tz="Etc/GMT+1"
header_final <- paste(substr(header.file, 1, nchar(header.file)-17), "header_final.txt", sep="")
header_final <- as.character(read.table(header_final, header=FALSE)[,1])
}
if (station=="S2") {
skip <- 1; date_col=2; tz="Etc/GMT+2"
}
if (station_gen=="DOMEF" | station_gen=="DOMES" | station_gen=="DOPAS" | station_gen=="NEMEF") {
skip <- 5; date_col=1; tz="Etc/GMT+1"
}
skip
data <- rep(NA,length(header))
datetime <- chron(dates.  = "2012-02-02", times. = "01:00:00",
format= c(dates = "y-m-d", times = "h:m:s"))
library(chron)
library(chron)
library(zoo)
data <- rep(NA,length(header))
datetime <- chron(dates.  = "2012-02-02", times. = "01:00:00",
format= c(dates = "y-m-d", times = "h:m:s"))
source('~/GitHub/DataBaseAlpEnvEURAC/R/dB_readStationData.R', echo=TRUE)
data <- dB_readStationData(path = path, header.file = header.file, station = station)
str(data)
source('~/GitHub/DataBaseAlpEnvEURAC/R/dB_readStationData.R', echo=TRUE)
data <- dB_readStationData(path = path, header.file = header.file, station = station)
str(data)
smc <- dB_getSWC(path2data = path, station = "NEMEF1500", aggregation = "h", minVALUE = 0, maxVALUE = 1)
path
path2data <-"/media/alpenv/Projekte/MONALISA/05_Arbeitsbereiche/BrJ/01_data/Stations_MONALISA/NEMEF"
smc <- dB_getSWC(path2data = path2data, station = "NEMEF1500", aggregation = "h", minVALUE = 0, maxVALUE = 1)
path2data <-"/media/alpenv/Projekte/MONALISA/05_Arbeitsbereiche/BrJ/01_data/Stations_MONALISA"
smc <- dB_getSWC(path2data = path2data, station = "NEMEF1500", aggregation = "h", minVALUE = 0, maxVALUE = 1)
station
station_nr <- as.integer(substr(station, nchar(station)-3, nchar(station)))
station_nr
station_  <- substr(station, 1, nchar(station)-4)
station_
if (station_ == "XS") station_ <- "S"
path2files = file.path(path2data,station_,station)
header.file = file.path(path2data,station_,paste("header_",station,".txt",sep=""))
path2files
header.file
data_raw <- dB_readStationData(path = path2files, header.file = header.file, station = station)
smc <- dB_getSWC(path2data = path2data, station = "NEMEF1500", aggregation = "h", minVALUE = 0, maxVALUE = 1)
plot(smc)
source('~/GitHub/DataBaseAlpEnvEURAC/R/dB_getSWC.R', echo=TRUE)
smc <- dB_getSWC(path2data = path2data, station = "NEMEF1500", aggregation = "h", minVALUE = 0, maxVALUE = 1)
plot(smc)
smc_d <- dB_getSWC(path2data = path2data, station = "NEMEF1500", aggregation = "d", minVALUE = 0, maxVALUE = 1)
plot(smc)
plot(smc_d)
nemef <- dB_updatedb(stations = "NEMEF1500", variables = "TOTAL", path2data = path2data, inCloud = "/home/jbre/Schreibtisch/", write_csv = T, return_data = T)
plot(nemef)[,1:3]
plot(nemef)[,1]
plot(nemef[,5])
plot(nemef[5])
str(nemef)
str(nemef$NEMEF1500[,5])
plot(nemef$NEMEF1500[,5])
plot(nemef$NEMEF1500[,5:10])
nemef <- dB_updatedb(stations = "NEMEF1500", variables = "SWC", path2data = path2data, inCloud = "/home/jbre/Schreibtisch/", write_csv = T, return_data = T)
?dB_updatedb
nemef <- dB_updatedb(stations = "NEMEF1500", variables = "SMC", path2data = path2data, inCloud = "/home/jbre/Schreibtisch/", write_csv = T, return_data = T)
plot(nemef)
plot(nemef$NEMEF1500)
nemef <- dB_updatedb(stations = c("DOPAS2000","NEMEF1500"), variables = "TOTAL", path2data = path2data, inCloud = "/home/jbre/Schreibtisch/", write_csv = T, return_data = T)
nemef <- dB_updatedb(stations = c("DOPAS2000","NEMEF1500"), variables = "TOTAL", path2data = path2data, inCloud = "/home/jbre/Schreibtisch/", write_csv = T, return_data = T)
nemef <- dB_updatedb(stations = c("DOPAS2000","NEMEF1500"), variables = "TOTAL", path2data = path2data, inCloud = "/home/jbre/Schreibtisch/", write_csv = T, return_data = T)
nemef <- dB_updatedb(stations = c("DOMEF1500"), variables = "TOTAL", path2data = path2data, inCloud = "/home/jbre/Schreibtisch/", write_csv = T, return_data = T)
nemef <- dB_updatedb(stations = c("DOMEF1500"), variables = "SWC", path2data = path2data, inCloud = "/home/jbre/Schreibtisch/", write_csv = T, return_data = T)
?dB_getSWC
source('~/GitHub/DataBaseAlpEnvEURAC/R/dB_updatedb.R', echo=TRUE)
nemef <- dB_updatedb(stations = c("DOMEF1500"), variables = "SWC", path2data = path2data, inCloud = "/home/jbre/Schreibtisch/", write_csv = T, return_data = T)
library(Helper4me)
Helper4me::help_updateGITlib("DataBaseAlpEnvEURAC")
library(DataBaseAlpEnvEURAC)
nemef <- dB_updatedb(stations = c("DOMEF1500"), variables = "SWC", path2data = "/media/alpenv/Projekte/MONALISA/05_Arbeitsbereiche/BrJ/01_data/Stations_MONALISA/", inCloud = "/home/jbre/Schreibtisch/", write_csv = T, return_data = T)
plot(nemef)
plot(nemef$DOMEF1500)
require(RSAGA)
rsaga.get.libraries()
work_env <- rsaga.env(path = '/usr/bin',modules = '/usr/lib64/saga')
work_env <- rsaga.env(path = '/usr/bin',modules = '/usr/lib/saga')
work_env <- rsaga.env()
work_env <- rsaga.env(path = '/usr/bin')
work_env <- rsaga.env(path = '/usr/bin', modules = '/usr/lib/x86_64-linux-gnu/saga
')
work_env <- rsaga.env(path = '/usr/bin', modules = '/usr/lib/x86_64-linux-gnu/saga
')
work_env <- rsaga.env(path = '/usr/bin', modules = '/usr/lib/x86_64-linux-gnu/saga/
')
work_env <- rsaga.env(path = "/usr/bin", modules = "/usr/lib/x86_64-linux-gnu/saga/
")
work_env <- rsaga.env(modules = "/usr/lib/x86_64-linux-gnu/saga/
")
work_env <- rsaga.env(modules = "/usr/lib/x86_64-linux-gnu/saga/")
work_env <- rsaga.env(path = "/usr/bin", modules = "/usr/lib/x86_64-linux-gnu/saga/")
rsaga.get.libraries()
rsaga.get.libraries(path = work_env)
rsaga.get.libraries(env=work_env)
rsaga.get.libraries()
rsaga.get.libraries(path = "/usr/lib/x86_64-linux-gnu/saga/" )
rsaga.get.modules(lib = "ta_lighting, path = "/usr/lib/x86_64-linux-gnu/saga/" )
rsaga.get.modules(lib = "ta_lighting", path = "/usr/lib/x86_64-linux-gnu/saga/")
rsaga.get.modules(lib = "ta_lighting", env = work_env)
rsaga.get.modules(lib = "ta_hydrology", env = work_env)
?rsaga.geoprocessor
rsaga.get.modules(lib = "ta_preprocessor", env = work_env)
library(raster)
faccum <- raster("/home/jbre/Schreibtisch/Jucar_Basin_12 2.2011/GIS/flow_accum_rho8.tif")
str(values(faccum))
max(values(faccum) na.rm=T)
max(values(faccum), na.rm=T)
which.max(values(faccum), na.rm=T)
which.max(values(faccum))
values(faccum)[6271077]
which.max(values(faccum)==-1)
values(faccum)[319448]
which.max(values(faccum)==(-1))
values(faccum)[319448]
which.max(values(faccum)==(1))
which.max(values(faccum))
faccum <- NA
summary(values(faccum))
all(is.na(values(faccum)))
faccum <- raster("/home/jbre/Schreibtisch/Jucar_Basin_12 2.2011/GIS/flow_accum_rho8.tif")
values(faccum) <- NA
all(is.na(values(faccum)))
values(faccum)[6271077] <- -1
all(is.na(values(faccum)))
writeRaster(x = faccum, filename = "facc.asc")
faccum <- raster("/home/jbre/Schreibtisch/Jucar_Basin_12 2.2011/GIS/dem_filled_100.tif")
writeRaster(x = faccum, filename = "dem.asc")
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
setwd("/home/jbre/Schreibtisch/Jucar_Basin_12 2.2011/SAGA")
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
SAGAENV <- rsaga.env(path = "/usr/bin",
modules = "/usr/lib/x86_64-linux-gnu/saga/")
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "facc.asc", name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOTOP = F, MHM = T)
SAGAENV
SAGAENV <- rsaga.env(path = "/usr/bin",
modules = "/usr/lib/x86_64-linux-gnu/saga/", version = "2.2.3")
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "facc.asc", name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOTOP = F, MHM = T)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "facc.asc", name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOTOP = F, MHM = T)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "facc.asc", name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOTOP = F, MHM = T)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "facc.asc", name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOTOP = F, MHM = T)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "facc.asc", name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOTOP = F, MHM = T)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "facc.asc", name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOTOP = F, MHM = T)
SAGAENV
as.integer(SAGAENV$version)
as.integer(strsplit(SAGAENV$version,"."))
(strsplit(SAGAENV$version,"."))
(strsplit(".",SAGAENV$version))
SAGAENV$version
SAGAENV$version,1,2
substr(SAGAENV$version,1,2)
substr(SAGAENV$version,1,1)
int(substr(SAGAENV$version,1,1))
integer(substr(SAGAENV$version,1,1))
as.integer(substr(SAGAENV$version,1,1))
int.saga.version <- as.integer(substr(SAGAENV$version,1,1)) *100 + as.integer(substr(SAGAENV$version,3,3)) *10 + as.integer(substr(SAGAENV$version,5,5))
int.saga.version
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "facc.asc", name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOTOP = F, MHM = T)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "facc.asc", name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOTOP = F, MHM = T)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "facc.asc", name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOTOP = F, MHM = T)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "facc.asc", name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOtop = F, MHM = T)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "facc.asc", name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOtop = F, MHM = T)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "facc.asc", name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOtop = F, MHM = T)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "gauge_Jucar.asc", name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOtop = F, MHM = T
efws
facc <- raster("/home/jbre/Schreibtisch/Jucar_Basin_12 2.2011/GIS/flow_accum_rho8.tif")
which(values(facc)==2043809)
which(values(facc)==2043870)
values(facc) <- NA
values(which(values(facc)==2043870)) <- -1
values(facc)[which(values(facc)==2043870)] <- -1
summary(values(facc))
unique(values(facc))
which(values(facc)==2043870)
values(facc)[6002102] <- -1
writeRaster(x = facc, filename = "gaugeJucar.asc")
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "gaugeJucar.asc", name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOtop = F, MHM = T
)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "gaugeJucar.asc", minArea=1000, name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOtop = F, MHM = T)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "gaugeJucar1.asc", minArea=100, name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOtop = F, MHM = T)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "gaugeJucar1.asc", minArea=100, name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOtop = F, MHM = T)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "gaugeJucar1.asc", minArea=100, name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOtop = F, MHM = T)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
GEOtop_CreateInptsMAPS(dem = "dem.asc", res = 100, stream_gauge = "gaugeJucar1.asc", minArea=100, name_gauge = "Jucar", preprocess = T, SkyView = F, FlowAccum = T, soil = F, landcover = F, bedrock = F, LAI = F, SAGAENV = SAGAENV, mask_only_lc = F, GEOtop = F, MHM = T)
?rsaga.sgrd.to.esri
ascii <- readLines(con =paste("./DEM/dem",res,".asc",sep=""))
res
res=100
ascii <- readLines(con =paste("./DEM/dem",res,".asc",sep=""))
header <- ascii[1:6]
str(ascii)
?vapply
sapply(acsii, function(x) gsub("-99999.00000", "-9999", x))
ascii <- readLines(con =paste("./DEM/dem",res,".asc",sep=""))
sapply(acsii, function(x) gsub("-99999.00000", "-9999", x))
sapply(ascii, function(x) gsub("-99999.00000", "-9999", x))
source('~/GitHub/AnalyseGEOtop/R/GEOtop_CreateInptsMAPS.R', echo=TRUE)
files <- dir("./mHMASC100/", full.names = T)
