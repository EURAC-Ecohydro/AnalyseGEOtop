plot(H[[1]])
varPointIn$name
df_names
"soil_moisture_content" %in% df_names
grep("soil_moisture_content",df_names)
sapply(name_df, grep, pattern="soil_moisture_content")
sapply(df_names, grep, pattern="soil_moisture_content")
sapply(df_names, grep, pattern="soil_moisture_content", values=F)
?grep
sapply(df_names, grep, pattern="soil_moisture_content", value=F)
sapply(df_names, grep, pattern="soil_moisture_content", value=T)
sapply(df_names, grep, pattern="soil_temperature", value=T)
c(sapply(df_names, grep, pattern="soil_temperature", value=T))
length(c(sapply(df_names, grep, pattern="soil_temperature", value=T)))
?regex
?grepl
length(c(sapply(df_names, grep, pattern="soil_temperature", value=T)))
length(sapply(df_names, grep, pattern="soil_temperature", value=T))
length(sapply(df_names, grep, pattern="soil_", value=T))
View(lookup_tbl_observation)
soil_files=T
length(sapply(df_names, grep, pattern="soil_moisture_content", value=T)) > 1 |
length(sapply(df_names, grep, pattern="soil_temperature", value=T)) > 1 |
length(sapply(df_names, grep, pattern="liquid_soil_water_pressure", value=T)) > 1
if (soil_files) {
soil_input <- get.geotop.inpts.keyword.value(keyword="SoilParFile", wpath=wpath, data.frame=TRUE)
soil_thickness <- soil_input[,1]
} else {
Dz <- soil_thickness <- get.geotop.inpts.keyword.value("SoilLayerThicknesses", numeric = T, wpath=wpath)
Kh <-     get.geotop.inpts.keyword.value("NormalHydrConductivity", numeric = T, wpath=wpath)
Kv <-     get.geotop.inpts.keyword.value("LateralHydrConductivity", numeric = T, wpath=wpath)
vwc_r <-  get.geotop.inpts.keyword.value("ThetaRes", numeric = T, wpath=wpath)
vwc_w <-  get.geotop.inpts.keyword.value("WiltingPoint", numeric = T, wpath=wpath)
vwc_fc <- get.geotop.inpts.keyword.value("FieldCapacity", numeric = T, wpath=wpath)
vwc_s <-  get.geotop.inpts.keyword.value("ThetaSat", numeric = T, wpath=wpath)
alpha <-  get.geotop.inpts.keyword.value("AlphaVanGenuchten", numeric = T, wpath=wpath)
n <-      get.geotop.inpts.keyword.value("NVanGenuchten", numeric = T, wpath=wpath)
soil_input <- data.frame(Dz,Kh,Kv,vwc_r,vwc_w,vwc_fc,vwc_s,alpha,n)
}
soil_input
soil_head <- diff(c(0,cumsum(soil_thickness)))/2 + c(0,cumsum(soil_thickness))[-length(soil_thickness)-1]
soil_file <- get.geotop.inpts.keyword.value(keyword="SoilLiqContentProfileFile", wpath=wpath, data.frame=TRUE)
soil_file
str(soil_file)
soil_header <- names(soil_file)[-c(1:6)]
str(var_out[[1]])
sapply(df_names, grep, pattern="soil_moisture_content", value=T)
names <- sapply(df_names, grep, pattern="soil_moisture_content", value=T)
str_split(names,"_")
unlist(str_split(names,"_"))
strsplit_names[[1]]
strsplit_names <- str_split(names,"_")
strsplit_names[[1]]
matrix(unlist(strsplit_names),nrow = length(names), ncol=length(strsplit_names[[1]]))
matrix(unlist(strsplit_names),ncol = length(names), nrow=length(strsplit_names[[1]]))
split_mat <- matrix(unlist(strsplit_names),nrow = length(names), ncol=length(strsplit_names[[1]]), byrow = F)
split_mat
split_mat <- matrix(unlist(strsplit_names),nrow = length(names), ncol=length(strsplit_names[[1]]), byrow = T)
split_mat
unique(split_mat)
unique(split_mat[,4])
as.integer(unique(split_mat[,4]))
depth_mm <- as.integer(unique(split_mat[,4]))
soil_head
soil_header
depth_mm <- as.integer(unique(split_mat[,4]))
sapply(depth_mm, function(x) which.min(soil_head-x))
soil_head-depth_mm[1]
depth_mm
sapply(depth_mm, function(x) which.min(soil_head-x))
?which.min
sapply(depth_mm, function(x) which.min(abs(soil_head-x)))
str(soil_file)
soil_time <- as.POSIXct(strftime(x = soil_file[,1], format = "%d/%m/%Y %H:%M", tz = "Etc/GMT+1"))
str(soil_time)
soil_time <- as.POSIXct(strftime(x = as.character(soil_file[,1]), format = "%d/%m/%Y %H:%M", tz = "Etc/GMT+1"))
str(soil_time)
strftime()
?strftime
soil_time <- as.POSIXct(strptime(x = as.character(soil_file[,1]), format = "%d/%m/%Y %H:%M", tz = "Etc/GMT+1"))
str(soil_time)
str(zoo(soil_file[,soil_header[,choice]], soil_time))
choice <- sapply(depth_mm, function(x) which.min(abs(soil_head-x)))
str(zoo(soil_file[,soil_header[,choice]], soil_time))
soil_header
choice
soil_data <- zoo(soil_file[,soil_header[choice]], soil_time)
str(soil_data)
soil_file <- get.geotop.inpts.keyword.value(keyword="SoilLiqContentProfileFile", wpath=wpath, data.frame=TRUE)
names <- sapply(df_names, grep, pattern="soil_moisture_content", value=T)
strsplit_names <- str_split(names,"_")
split_mat <- matrix(unlist(strsplit_names),nrow = length(names), ncol=length(strsplit_names[[1]]), byrow = T)
depth_mm <- as.integer(unique(split_mat[,4]))
choice <- sapply(depth_mm, function(x) which.min(abs(soil_head-x)))
soil_data <- zoo(soil_file[,soil_header[choice]], soil_time)
for (i in depth_mm) var_out[[paste("soil_moisture_content_", i, sep="")]] <- soil_data[,i]
names <- sapply(df_names, grep, pattern="soil_moisture_content", value=T)
strsplit_names <- str_split(names,"_")
split_mat <- matrix(unlist(strsplit_names),nrow = length(names), ncol=length(strsplit_names[[1]]), byrow = T)
depth_mm <- as.integer(unique(split_mat[,4]))
choice <- sapply(depth_mm, function(x) which.min(abs(soil_head-x)))
soil_data <- zoo(soil_file[,soil_header[choice]], soil_time)
for (i in 1:length(depth_mm)) var_out[[paste("soil_moisture_content_", depth_mm[i], sep="")]] <- soil_data[,i]
if (length(sapply(df_names, grep, pattern="soil_moisture_content", value=T)) > 1)
{
names <- sapply(df_names, grep, pattern="soil_moisture_content", value=T)
strsplit_names <- str_split(names,"_")
split_mat <- matrix(unlist(strsplit_names),nrow = length(names), ncol=length(strsplit_names[[1]]), byrow = T)
depth_mm <- as.integer(unique(split_mat[,4]))
choice <- sapply(depth_mm, function(x) which.min(abs(soil_head-x)))
soil_data <- zoo(soil_file[,soil_header[choice]], soil_time)
for (i in 1:length(depth_mm)) var_out[[paste("soil_moisture_content_", depth_mm[i], sep="")]] <- soil_data[,i]
}
source('~/GitHub/AnalyseGEOtop/GEOtop_readValidationData.R', echo=TRUE)
wpath <- "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/Montecini_pnt_1_225_B2_011/"
data("observations_B2")
obs   <- list(hour=B2_h, day=B2_d)
source('~/GitHub/AnalyseGEOtop/GEOtop_readValidationData.R', echo=TRUE)
test <- GEOtop_ReadValidationData(wpath,obs)
source('~/GitHub/AnalyseGEOtop/GEOtop_readValidationData.R', echo=TRUE)
test <- GEOtop_ReadValidationData(wpath,obs)
str(test)
names(test)
SWP_B2 <- dB_getSWP(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/", header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt", station = "B", station_nr = 2, aggregation = "h")
library(DataBaseAlpEnvEURAC)
SWP_B2 <- dB_getSWP(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/", header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt", station = "B", station_nr = 2, aggregation = "h")
str(SWP_B2)
plot(SWP_B2)
swp_5 <- rowMeans(SWP_B2[,c(2,3)])
str(swp_5)
swp_5 <- zoo(rowMeans(SWP_B2[,c(2,3)]), time(SWP_B2))
swp_200 <- zoo(rowMeans(SWP_B2[,c(4,6)]), time(SWP_B2))
plot(swp_200)
str(swp_200)
swp_050 <- zoo(rowMeans(SWP_B2[,c(2,3)]), as.POSIXlt(time(SWP_B2)), tz="GMT")
swp_050 <- zoo(rowMeans(SWP_B2[,c(2,3)]), as.POSIXlt(time(SWP_B2)))
swp_200 <- zoo(rowMeans(SWP_B2[,c(4,6)]), as.POSIXlt(time(SWP_B2)))
SoilT_B2 <- dB_getSoilTemp(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/", header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt", station = "B", station_nr = 2, aggregation = "h")
swp_050_d <- zoo(swp_050, as.Date(time(swp_050)))
library(zoo)
swp_050_d <- aggregate(swp_050, as.Date(time(swp_050)), mean)
swp_050_d <- aggregate(swp_200, as.Date(time(swp_200)), mean)
str(SoilT_B2)
plot(swp_050)
plot(swp_200)
plot(swp_050)
swp_050 <- zoo(rowMeans(SWP_B2[,c(2,3)]), as.POSIXlt(time(SWP_B2)))
swp_200 <- zoo(rowMeans(SWP_B2[,c(4,6)]), as.POSIXlt(time(SWP_B2)))
swp_050_d <- aggregate(swp_050, as.Date(time(swp_050)), mean)
swp_200_d <- aggregate(swp_200, as.Date(time(swp_200)), mean)
plot(swp_200_d)
plot(SoilT_B2)
names(SoilT_B2)
soilT_000 <- zoo(rowMeans(SoilT_B2[,c(1,2)]), as.POSIXlt(time(SoilT_B2)))
soilT_000_d <- aggregate(soilT_000, as.Date(time(soilT_000)), mean)
plot(soilT_000_d)
soilT_050 <- zoo(rowMeans(SoilT_B2[,c(3,4)]), as.POSIXlt(time(SoilT_B2)))
soilT_050_d <- aggregate(soilT_050, as.Date(time(soilT_050)), mean)
soilT_200 <- zoo(rowMeans(SoilT_B2[,c(3,4)]), as.POSIXlt(time(SoilT_B2)))
soilT_200_d <- aggregate(soilT_200, as.Date(time(soilT_200)), mean)
soilT_500 <- zoo(SoilT_B2[,10], as.POSIXlt(time(SoilT_B2)))
soilT_500_d <- aggregate(soilT_200, as.Date(time(soilT_200)), mean)
# observations B2
# station data & eddy data (ET, LE, H)
library(DataBaseAlpEnvEURAC)
library(SoilMoisturePattern)
library(zoo)
library(chron)
#load
#meteoB2
meteoB2 <- dB_getMETEO(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/", header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt", station = "B2", cols = c("Rain","WindSpeed","WindDirection","RH","Temp","SolarRadiation","NetRs","NetRl"))
#soil water pressure
SWP_B2 <- dB_getSWP(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/", header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt", station = "B", station_nr = 2, aggregation = "h")
swp_050 <- zoo(rowMeans(SWP_B2[,c(2,3)]), as.POSIXlt(time(SWP_B2)))
swp_050_d <- aggregate(swp_050, as.Date(time(swp_050)), mean)
swp_200 <- zoo(rowMeans(SWP_B2[,c(4,6)]), as.POSIXlt(time(SWP_B2)))
swp_200_d <- aggregate(swp_200, as.Date(time(swp_200)), mean)
#soil temperature
SoilT_B2 <- dB_getSoilTemp(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/", header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt", station = "B", station_nr = 2, aggregation = "h")
soilT_000 <- zoo(rowMeans(SoilT_B2[,c(1,2)]), as.POSIXlt(time(SoilT_B2)))
soilT_000_d <- aggregate(soilT_000, as.Date(time(soilT_000)), mean)
soilT_050 <- zoo(rowMeans(SoilT_B2[,c(3,4)]), as.POSIXlt(time(SoilT_B2)))
soilT_050_d <- aggregate(soilT_050, as.Date(time(soilT_050)), mean)
soilT_100 <- zoo(rowMeans(SoilT_B2[,c(5,6)]), as.POSIXlt(time(SoilT_B2)))
soilT_100_d <- aggregate(soilT_100, as.Date(time(soilT_100)), mean)
soilT_200 <- zoo(rowMeans(SoilT_B2[,c(7,8)]), as.POSIXlt(time(SoilT_B2)))
soilT_200_d <- aggregate(soilT_200, as.Date(time(soilT_200)), mean)
soilT_500 <- zoo(SoilT_B2[,10], as.POSIXlt(time(SoilT_B2)))
soilT_500_d <- aggregate(soilT_500, as.Date(time(soilT_500)), mean)
# observed SMC, ET, LE, H data
data(observed_mrd)
data(validation)
#aggregate hourly
aggr_vec <- floor(as.numeric(time(meteoB2)) * 24)
meteoB2_h <- aggregate(x = meteoB2, by = aggr_vec, FUN = mean,
na.rm = F)
meteoB2_h <- zoo(x = coredata(meteoB2_h), order.by = chron(time(meteoB2_h)/24))
meteoB2_h$Rain <- aggregate(x = meteoB2$Rain, by = aggr_vec, FUN = sum, na.rm = F)
meteoB2_h <- zoo(coredata(meteoB2_h), as.POSIXlt(time(meteoB2_h), tz="GMT"))
#aggregation daily
meteoB2_d <- aggregate(x = meteoB2_h, by = as.Date(time(meteoB2_h)), FUN = mean)
meteoB2_d$Rain <- meteoB2_d$Rain*24
#Energy fluxes and ET
EnergyFluxes <- zoo(x=EnergyFluxes_df[,c(2,3)],
order.by=as.POSIXlt(x=strptime(as.character(EnergyFluxes_df$Date_Time), format = "%d/%m/%Y %H:%M"), tz = "GMT"))
EnergyFluxes_daily <- aggregate(x = EnergyFluxes, by = as.Date(time(EnergyFluxes)), FUN = mean, na.rm=TRUE)
ET_B2 <- zoo(x=ET_B2$ET_mm_d, order.by=as.Date(x=ET_B2$date,format="%d.%m.%y"))
#aggregate SMC daily
SMC_050_B2_d <- aggregate(B2$z0005, by = as.Date(time(B2$z0005)), FUN = mean)
SMC_200_B2_d <- aggregate(B2$z0020, by = as.Date(time(B2$z0020)), FUN = mean)
# merge dataset
B2_h <- merge(meteoB2_h, B2$z0005, B2$z0020, swp_050, swp_200, soilT_000, soilT_050, soilT_100, soilT_200, soilT_500)
B2_h <- round(B2_h,3)
dimnames(B2_h)[[2]] <- c("air_temperature", "relative_humidity", "net_radiation", "rainfall_amount", "wind_speed", "wind_from_direction", "net_downward_shortwave_flux", "net_downward_longwave_flux",
"soil_moisture_content_050_min", "soil_moisture_content_050_mean", "soil_moisture_content_050_max", "soil_moisture_content_050_sd",
"soil_moisture_content_200_min", "soil_moisture_content_200_mean", "soil_moisture_content_200_max", "soil_moisture_content_200_sd",
"soil_temperature_000", "soil_temperature_050", "soil_temperature_100", "soil_temperature_200", "soil_temperature_500",
"liquid_soil_water_pressure_050","liquid_soil_water_pressure_200")
B2_d <- merge(meteoB2_d, SMC_050_B2_d, SMC_200_B2_d, swp_050_d, swp_200_d, soilT_000_d, soilT_050_d, soilT_100_d, soilT_200_d, soilT_500_d, EnergyFluxes_daily, ET_B2)
B2_d <- round(B2_d,3)
dimnames(B2_d)[[2]] <- c("air_temperature", "relative_humidity", "net_radiation", "rainfall_amount", "wind_speed", "wind_from_direction", "net_downward_shortwave_flux", "net_downward_longwave_flux",
"soil_moisture_content_050_min", "soil_moisture_content_050_mean", "soil_moisture_content_050_max", "soil_moisture_content_050_sd",
"soil_moisture_content_200_min", "soil_moisture_content_200_mean", "soil_moisture_content_200_max", "soil_moisture_content_200_sd",
"liquid_soil_water_pressure_050","liquid_soil_water_pressure_200",
"soil_temperature_000", "soil_temperature_050", "soil_temperature_100", "soil_temperature_200", "soil_temperature_500",
"latent_heat_flux_in_air", "sensible_heat_flux_in_air", "evapotranspiration_amount")
write.zoo(x = B2_h, file = "/home/jbr/GitHub/AnalyseGEOtop/data/observed_B2_h.csv", row.names = F, sep=",", quote=F)
write.zoo(x = B2_d, file = "/home/jbr/GitHub/AnalyseGEOtop/data/observed_B2_d.csv", row.names = F, sep=",", quote=F)
save(list=c("B2_h","B2_d"), file = "/home/jbr/GitHub/AnalyseGEOtop/data/observations_B2.RData")
soilT_000 <- zoo(rowMeans(SoilT_B2[,c(1,2)]), as.POSIXlt(time(SoilT_B2)))
B2_h <- merge(meteoB2_h, B2$z0005, B2$z0020)
dimnames(B2_h)[[2]] <- c("air_temperature", "relative_humidity", "net_radiation", "rainfall_amount", "wind_speed", "wind_from_direction", "net_downward_shortwave_flux", "net_downward_longwave_flux",
"soil_moisture_content_050_min", "soil_moisture_content_050_mean", "soil_moisture_content_050_max", "soil_moisture_content_050_sd",
"soil_moisture_content_200_min", "soil_moisture_content_200_mean", "soil_moisture_content_200_max", "soil_moisture_content_200_sd")
B2_d <- merge(meteoB2_d, SMC_050_B2_d, SMC_200_B2_d, swp_050_d, swp_200_d, soilT_000_d, soilT_050_d, soilT_100_d, soilT_200_d, soilT_500_d, EnergyFluxes_daily, ET_B2)
B2_d <- round(B2_d,3)
dimnames(B2_d)[[2]] <- c("air_temperature", "relative_humidity", "net_radiation", "rainfall_amount", "wind_speed", "wind_from_direction", "net_downward_shortwave_flux", "net_downward_longwave_flux",
"soil_moisture_content_050_min", "soil_moisture_content_050_mean", "soil_moisture_content_050_max", "soil_moisture_content_050_sd",
"soil_moisture_content_200_min", "soil_moisture_content_200_mean", "soil_moisture_content_200_max", "soil_moisture_content_200_sd",
"liquid_soil_water_pressure_050","liquid_soil_water_pressure_200",
"soil_temperature_000", "soil_temperature_050", "soil_temperature_100", "soil_temperature_200", "soil_temperature_500",
"latent_heat_flux_in_air", "sensible_heat_flux_in_air", "evapotranspiration_amount")
write.zoo(x = B2_h, file = "/home/jbr/GitHub/AnalyseGEOtop/data/observed_B2_h.csv", row.names = F, sep=",", quote=F)
write.zoo(x = B2_d, file = "/home/jbr/GitHub/AnalyseGEOtop/data/observed_B2_d.csv", row.names = F, sep=",", quote=F)
save(list=c("B2_h","B2_d"), file = "/home/jbr/GitHub/AnalyseGEOtop/data/observations_B2.RData")
load("~/GitHub/AnalyseGEOtop/data/lookup_tbl_observation.RData")
View(lookup_tbl_observation)
read.csv("data/tbl_observations")
lookup_tbl_observation <- read.csv("data/tbl_observations")
save("lookup_tbl_observation", file = "data/lookup_tbl_observation.RData")
wpath <- "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/Montecini_pnt_1_225_B2_011/"
data("observations_B2")
obs   <- list(hour=B2_h, day=B2_d)
wpath <- "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/Montecini_pnt_1_225_B2_011/"
data("observations_B2")
obs   <- list(hour=B2_h, day=B2_d)
str(obs)
names(obs[[1]])
dimnames(obs[[1]])
dimnames(obs[[2]])
data(lookup_tbl_observation)
if (any(names(obs)=="hour") & any(names(obs)=="day")) Donly <- which(! dimnames(obs$day)[2][[1]] %in% dimnames(obs$hour)[2][[1]]) else Donly <- NULL
if (file.exists(file.path(wpath,"listpoints.txt")))
{
listpoints <- read.csv(file.path(wpath,"listpoints.txt"))
xpoints <- listpoints$xcoord
ypoints <- listpoints$ycoord
} else {
xpoints <- get.geotop.inpts.keyword.value("CoordinatePointX",wpath=wpath,numeric=T)
ypoints <- get.geotop.inpts.keyword.value("CoordinatePointY",wpath=wpath,numeric=T)
}
if (!is.null(Donly)) base <- obs$day else base <- obs$hour
df_names <- as.data.frame(dimnames(base)[2][[1]])
names(df_names) <- "name"
varPointIn <- merge(df_names, lookup_tbl_observation, by.x="name", by.y = "obs_var")
varPointIn_what_direct <- varPointIn$geotop_what[varPointIn$geotop_where=="PointOutputFile"]
varPointIn_name_direct <- varPointIn$name[varPointIn$geotop_where=="PointOutputFile"]
level <- 1:length(xpoints)
# read point data with specified keyword
point_data <- get.geotop.inpts.keyword.value(keyword="PointOutputFile", wpath=wpath,
raster=FALSE,
data.frame=TRUE,
level=level,
date_field="Date12.DDMMYYYYhhmm.",
tz="Etc/GMT+1")
library(geotopbricks)
point_data <- get.geotop.inpts.keyword.value(keyword="PointOutputFile", wpath=wpath,
raster=FALSE,
data.frame=TRUE,
level=level,
date_field="Date12.DDMMYYYYhhmm.",
tz="Etc/GMT+1")
var_out <- list()
for (i in 1:length(varPointIn_what_direct))
{
name <- as.character(varPointIn_name_direct)[i]
var <- as.character(varPointIn_what_direct)[i]
i_split <- strsplit(as.character(var),"%")
if (length(i_split[[1]])==1) {
var_out[[name]] <- point_data[,var]
} else {
var_out[[ i_split[[1]][1] ]] <- point_data[ ,i_split[[1]][1] ]
var_out[[ i_split[[1]][2] ]] <- point_data[ ,i_split[[1]][2] ]
var_out[[name]] <- point_data[ ,i_split[[1]][1] ] + point_data[ ,i_split[[1]][2] ]
}
}
if ("postprocess_LE" %in% varPointIn$geotop_what)
{
LE <- point_data[,c("LEg_veg.W.m2.", "LEg_unveg.W.m2.", "LEv.W.m2.", "Canopy_fraction..." )]
names(LE) <- c("g_veg", "g_unveg", "veg", "cf")
data <- list(LE=LE)
LE <- GEOtop_EfluxOcanopy(data = data)
name <- as.character(varPointIn$name[varPointIn$geotop_what%in%"postprocess_LE"])
var_out[[name]] <- LE[[1]]
}
if ("postprocess_H" %in% varPointIn$geotop_what)
{
H <- point_data[,c("Hg_veg.W.m2.", "Hg_unveg.W.m2.", "Hv.W.m2.", "Canopy_fraction..." )]
names(H) <- c("g_veg", "g_unveg", "veg", "cf")
data <- list(H=H)
H <- GEOtop_EfluxOcanopy(data = data)
name <- as.character(varPointIn$name[varPointIn$geotop_what%in%"postprocess_H"])
var_out[[name]] <- H[[1]]
}
library(AnalyseGeotop)
if ("postprocess_LE" %in% varPointIn$geotop_what)
{
LE <- point_data[,c("LEg_veg.W.m2.", "LEg_unveg.W.m2.", "LEv.W.m2.", "Canopy_fraction..." )]
names(LE) <- c("g_veg", "g_unveg", "veg", "cf")
data <- list(LE=LE)
LE <- GEOtop_EfluxOcanopy(data = data)
name <- as.character(varPointIn$name[varPointIn$geotop_what%in%"postprocess_LE"])
var_out[[name]] <- LE[[1]]
}
if ("postprocess_H" %in% varPointIn$geotop_what)
{
H <- point_data[,c("Hg_veg.W.m2.", "Hg_unveg.W.m2.", "Hv.W.m2.", "Canopy_fraction..." )]
names(H) <- c("g_veg", "g_unveg", "veg", "cf")
data <- list(H=H)
H <- GEOtop_EfluxOcanopy(data = data)
name <- as.character(varPointIn$name[varPointIn$geotop_what%in%"postprocess_H"])
var_out[[name]] <- H[[1]]
}
if (length(sapply(df_names, grep, pattern="soil_moisture_content", value=T)) > 1 |
length(sapply(df_names, grep, pattern="soil_temperature", value=T)) > 1 |
length(sapply(df_names, grep, pattern="liquid_soil_water_pressure", value=T)) > 1)
{
if (soil_files) {
soil_input <- get.geotop.inpts.keyword.value(keyword="SoilParFile", wpath=wpath, data.frame=TRUE)
soil_thickness <- soil_input[,1]
} else {
Dz <- soil_thickness <- get.geotop.inpts.keyword.value("SoilLayerThicknesses", numeric = T, wpath=wpath)
Kh <-     get.geotop.inpts.keyword.value("NormalHydrConductivity", numeric = T, wpath=wpath)
Kv <-     get.geotop.inpts.keyword.value("LateralHydrConductivity", numeric = T, wpath=wpath)
vwc_r <-  get.geotop.inpts.keyword.value("ThetaRes", numeric = T, wpath=wpath)
vwc_w <-  get.geotop.inpts.keyword.value("WiltingPoint", numeric = T, wpath=wpath)
vwc_fc <- get.geotop.inpts.keyword.value("FieldCapacity", numeric = T, wpath=wpath)
vwc_s <-  get.geotop.inpts.keyword.value("ThetaSat", numeric = T, wpath=wpath)
alpha <-  get.geotop.inpts.keyword.value("AlphaVanGenuchten", numeric = T, wpath=wpath)
n <-      get.geotop.inpts.keyword.value("NVanGenuchten", numeric = T, wpath=wpath)
soil_input <- data.frame(Dz,Kh,Kv,vwc_r,vwc_w,vwc_fc,vwc_s,alpha,n)
}
# output depth in mm
soil_head <- diff(c(0,cumsum(soil_thickness)))/2 + c(0,cumsum(soil_thickness))[-length(soil_thickness)-1]
soil_file <- get.geotop.inpts.keyword.value(keyword="SoilLiqContentProfileFile", wpath=wpath, data.frame=TRUE)
soil_time <- as.POSIXct(strptime(x = as.character(soil_file[,1]), format = "%d/%m/%Y %H:%M", tz = "Etc/GMT+1"))
soil_header <- names(soil_file)[-c(1:6)]
}
soil_files=T
if (length(sapply(df_names, grep, pattern="soil_moisture_content", value=T)) > 1 |
length(sapply(df_names, grep, pattern="soil_temperature", value=T)) > 1 |
length(sapply(df_names, grep, pattern="liquid_soil_water_pressure", value=T)) > 1)
{
if (soil_files) {
soil_input <- get.geotop.inpts.keyword.value(keyword="SoilParFile", wpath=wpath, data.frame=TRUE)
soil_thickness <- soil_input[,1]
} else {
Dz <- soil_thickness <- get.geotop.inpts.keyword.value("SoilLayerThicknesses", numeric = T, wpath=wpath)
Kh <-     get.geotop.inpts.keyword.value("NormalHydrConductivity", numeric = T, wpath=wpath)
Kv <-     get.geotop.inpts.keyword.value("LateralHydrConductivity", numeric = T, wpath=wpath)
vwc_r <-  get.geotop.inpts.keyword.value("ThetaRes", numeric = T, wpath=wpath)
vwc_w <-  get.geotop.inpts.keyword.value("WiltingPoint", numeric = T, wpath=wpath)
vwc_fc <- get.geotop.inpts.keyword.value("FieldCapacity", numeric = T, wpath=wpath)
vwc_s <-  get.geotop.inpts.keyword.value("ThetaSat", numeric = T, wpath=wpath)
alpha <-  get.geotop.inpts.keyword.value("AlphaVanGenuchten", numeric = T, wpath=wpath)
n <-      get.geotop.inpts.keyword.value("NVanGenuchten", numeric = T, wpath=wpath)
soil_input <- data.frame(Dz,Kh,Kv,vwc_r,vwc_w,vwc_fc,vwc_s,alpha,n)
}
# output depth in mm
soil_head <- diff(c(0,cumsum(soil_thickness)))/2 + c(0,cumsum(soil_thickness))[-length(soil_thickness)-1]
soil_file <- get.geotop.inpts.keyword.value(keyword="SoilLiqContentProfileFile", wpath=wpath, data.frame=TRUE)
soil_time <- as.POSIXct(strptime(x = as.character(soil_file[,1]), format = "%d/%m/%Y %H:%M", tz = "Etc/GMT+1"))
soil_header <- names(soil_file)[-c(1:6)]
}
if (length(sapply(df_names, grep, pattern="soil_moisture_content", value=T)) > 1)
{
names <- sapply(df_names, grep, pattern="soil_moisture_content", value=T)
strsplit_names <- str_split(names,"_")
split_mat <- matrix(unlist(strsplit_names),nrow = length(names), ncol=length(strsplit_names[[1]]), byrow = T)
depth_mm <- as.integer(unique(split_mat[,4]))
choice <- sapply(depth_mm, function(x) which.min(abs(soil_head-x)))
soil_data <- zoo(soil_file[,soil_header[choice]], soil_time)
for (i in 1:length(depth_mm)) var_out[[paste("soil_moisture_content_", depth_mm[i], sep="")]] <- soil_data[,i]
}
length(sapply(df_names, grep, pattern="soil_moisture_content", value=T)
)
choice
str(var_out)
length(sapply(df_names, grep, pattern="liquid_soil_water_pressure", value=T)
)
soil_file <- get.geotop.inpts.keyword.value(keyword="SoilLiqWaterPressProfileFile", wpath=wpath, data.frame=TRUE)
names <- sapply(df_names, grep, pattern="liquid_soil_water_pressure", value=T)
names
split_mat <- matrix(unlist(strsplit_names),nrow = length(names), ncol=length(strsplit_names[[1]]), byrow = T)
depth_mm <- as.integer(unique(split_mat[,4]))
depth_mm
split_mat
strsplit_names
strsplit_names <- str_split(names,"_")
strsplit_names
names <- sapply(df_names, grep, pattern="liquid_soil_water_pressure", value=T)
strsplit_names <- str_split(names,"_")
split_mat <- matrix(unlist(strsplit_names),nrow = length(names), ncol=length(strsplit_names[[1]]), byrow = T)
split_mat
depth_mm <- as.integer(unique(split_mat[,5]))
depth_mm
choice <- sapply(depth_mm, function(x) which.min(abs(soil_head-x)))
soil_data <- zoo(soil_file[,soil_header[choice]], soil_time)
for (i in 1:length(depth_mm)) var_out[[paste("iquid_soil_water_pressure_", depth_mm[i], sep="")]] <- soil_data[,i]
soil_file <- get.geotop.inpts.keyword.value(keyword="SoilAveragedTempProfileFile", wpath=wpath, data.frame=TRUE)
names <- sapply(df_names, grep, pattern="soil_temperature", value=T)
strsplit_names <- str_split(names,"_")
split_mat <- matrix(unlist(strsplit_names),nrow = length(names), ncol=length(strsplit_names[[1]]), byrow = T)
depth_mm <- as.integer(unique(split_mat[,4]))
split_mat
depth_mm <- as.integer(unique(split_mat[,3]))
choice <- sapply(depth_mm, function(x) which.min(abs(soil_head-x)))
soil_data <- zoo(soil_file[,soil_header[choice]], soil_time)
for (i in 1:length(depth_mm)) var_out[[paste("soil_temperature", depth_mm[i], sep="")]] <- soil_data[,i]
library(shiny)
if(!require(AnalyseGeotop))
{
if(!require(devtools))
{
install.packages(devtools)
require(devtools)
}
install_github("AnalyseGeotop", "JBrenn")
require(AnalyseGeotop)
}
data("PointOutValidation_sim0011_1D_HiResAlp")
str(var_out)
names(var_out)
data("observations_B2")
library(dygraphs)
str(var_out)
ulatio
obs <- list(hour=B2_h, day=B2_d)
fun <- c("mean","sum")
names(fun) <- c("flux", "amount")
fun
fun <- fun_[input$flux_amount]
obs <- list(hour=B2_h, day=B2_d)
fun_ <- c("mean","sum")
names(fun_) <- c("flux", "amount")
fun_["flux"]
expression(fun)
fun <- fun_["flux"]
expression(fun)
fun
c(fun)
expression("mean")
?expression
as.expression("mean")
obs <- list(hour=B2_h, day=B2_d)
obs[["hour"]][,"air_temperature"]
var_out[["air_temperature"]]
input <- c(variable="air_temperature", aggregation="hour", flux_amount="flux")
input
input$variable
input <- as.data.frame(variable="air_temperature", aggregation="hour", flux_amount="flux")
input <- c(variable="air_temperature", aggregation="hour", flux_amount="flux")
library(dygraphs)
?dygraph
names(B2_d)
names(var_out)
if(!require(hydroGOF))
{
install.packages(hydroGOF)
require(hydroGOF)
}
?gof
gof(sim = data$simulation, obs=data$observation)
?GOF
?gof
observation <- obs[["hour"]][,"air_temperature"]
simulation <- var_out[["air_temperature"]]
data <- merge(observation, simulation)
gofs <- gof(sim = data$simulation, obs=data$observation, na.rm = T)
str(gofs)
gofs <- as.data.frame(gofs)
names(gofs)
dimnames(gofs)
gofs$GOF <- dimnames(gofs)[[1]]
str(gofs)
gofs <- gof(sim = data$simulation, obs=data$observation, na.rm = T)
gofs <- as.data.frame(gofs)
names(gofs) <- "VALUE"
gofs$GOF <- dimnames(gofs)[[1]]
str(gofs)
gofs <- gofs[,c(2,1)]
str(gofs)
