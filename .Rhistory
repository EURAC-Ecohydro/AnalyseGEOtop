GEOtop_VisSoilWaterRet(alpha = alpha, n = cal_result_5$N, theta_sat = cal_result_5$theta_sat_toplayer,
theta_res = cal_result_5$theta_res_toplayer, ksat = cal_result_5$ksat_toplayer,
theta_pwp = .13, theta_fc = .30, accurate = 1, colors=colors, plot_khy = F)
library("AnalyseGeotop", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", stations = "B2", read_data = F, calibrate = F, val_aggr = "h",model_run = "Montecini_pnt_1_225_B2_007")
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", stations = "B2", read_data = F, calibrate = F, val_aggr = "h",model_run = "Montecini_pnt_1_225_B2_007",linux = T)
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", stations = "B2", read_data = F, calibrate = F, val_aggr = "h",model_run = "Montecini_pnt_1_225_B2_007",linux = T, use_swc_liq = T)
load("/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/Montecini_pnt_1_225_B2_007/point.RData")
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", stations = "B2", read_data = T, calibrate = F, val_aggr = "h",model_run = "Montecini_pnt_1_225_B2_007",linux = T, use_swc_liq = T)
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", stations = "B2", read_data = T, calibrate = F, val_aggr = "h",model_run = "Montecini_pnt_1_225_B2_007",linux = T, use_swc_liq = T, soil_files = T)
detach("package:AnalyseGeotop", unload=TRUE)
remove.packages("AnalyseGeotop", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
library(devtools)
install_github("JBrenn/AnalyseGeotop")
library(AnalyseGeotop)
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", stations = "B2", read_data = T, calibrate = F, val_aggr = "h",model_run = "Montecini_pnt_1_225_B2_007",linux = T, use_swc_liq = T, soil_files = T)
a <- "SWnet.W.m2.+LWnet.W.m2."
a
strsplit(a,"+")
a <- "SWnet.W.m2.|LWnet.W.m2."
a
strsplit(a,"|")
strsplit(a,"_")
a<-"SWnet.W.m2.%LWnet.W.m2."
strsplit(a,"%")
lookup_tbl_observation <- read.table(file = "data/tbl_observations",sep=",",header=T)
lookup_tbl_observation <- read.table(file = "data/tbl_observations",sep=",",header=T)
lookup_tbl_observation <- read.table(file = "data/tbl_observations",sep=",",header=T)
View(lookup_tbl_observation)
lookup_tbl_observation <- read.table(file = "data/tbl_observations",sep=",",header=T)
View(lookup_tbl_observation)
rm(a)
save(list = "lookup_tbl_observations", file = "data/lookup_tbl_observation.RData")
save(list = "lookup_tbl_observation", file = "data/lookup_tbl_observation.RData")
lookup_tbl_observation <- read.table(file = "data/tbl_observations",sep=",",header=T)
save(list = "lookup_tbl_observations", file = "data/lookup_tbl_observation.RData")
save(list = "lookup_tbl_observation", file = "data/lookup_tbl_observation.RData")
library(AnalyseGeotop)
remove.packages("AnalyseGeotop", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
library(devtools)
install_github("JBrenn/AnalyseGeotop")
library(AnalyseGeotop)
data("lookup_tbl_observation")
View(lookup_tbl_observation)
library(DataBaseAlpEnvEURAC)
B2_meteo <- getMETEO(data=B2,
cols=c("Rain","WindSpeed","WindDirection","RH","Temp","SolarRadiation","SnowDepth"),
pdf.name="B2_meteo.pdf", mkreg=TRUE, plot=F)
meteoB2 <- dB_getMETEO(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/", header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt", station = "B2")
data()
data(calibration)
View(calibration)
data()
data("validation")
library(SoilMoisturePattern)
data()
data(observed_mrd)
str(B2)
data(B2)
data(observed_mrd)
str(meteoB2)
as.chron(index(B2))
chron(index(B2))
library(chron)
chron(index(B2))
library(zoo)
chron(index(B2))
as.chron(index(B2))
str(B2)
smcB2 <- zoo(coredataB2, as.POSIXlt(index(B2)))
smcB2 <- zoo(coredataB2, as.POSIXct(index(B2)))
smcB2 <- zoo(coredataB2, as.POSIXct(times(B2)))
smcB2 <- zoo(coredataB2, as.POSIXlt(times(B2)))
times(B2)[1]
time(B2)[1]
index(B2)[1]
index(B2)
str(B2)
smcB2_050 <- zoo(coredata(B2$z0005), as.POSIXlt(times(B2$z0005)))
str(meteoB2)
chron(times(meteoB2))
summary(meteoB2)
summary(chron(times(meteoB2)))
chron(as.numeric(times(meteoB2)))
as.numeric(times(meteoB2))
str(meteoB2)
as.POSIXlt(times(meteoB2))
as.POSIXlt(as.numeric(times(meteoB2)))
as.POSIXlt(as.numeric(times(meteoB2)), origin = "01-01-1970")
as.POSIXlt("01-01-1970")
as.POSIXlt("01/01/1970")
as.POSIXlt("01/01/70")
as.POSIXlt(as.Date("01/01/1970"))
as.POSIXlt(as.Date("01-01-1970"))
as.Date("01-01-1970")
as.POSIXlt(as.numeric(times(meteoB2)), origin = as.POSIXlt(as.Date("01-01-1970", format="%d-%m-%Y")))
as.POSIXlt(times(meteoB2), origin = as.POSIXlt(as.Date("01-01-1970", format="%d-%m-%Y")))
as.POSIXct(times(meteoB2), origin = as.POSIXlt(as.Date("01-01-1970", format="%d-%m-%Y")))
times(meteoB2)
str(meteoB2)
tail(meteoB2)
times(meteoB2)[1]
time(meteoB2)[1]
as.POSIXct(time(meteoB2)[1])
as.POSIXlt(time(meteoB2)[1])
?timezone
Sys.timezone()
as.POSIXlt(time(meteoB2)[1], tz="GMT")
str(B2)
time(B2$z0005[1])
time(B2$z0005[2])
meteoB2 <- zoo(coredata(meteoB2), as.POSIXlt(time(meteoB2)[1], tz="GMT"))
dB_getSWC()
dB_getSWC
str(meteoB2)
?dB_getMETEO
library(DataBaseAlpEnvEURAC)
library(SoilMoisturePattern)
library(zoo)
library(chron)
meteoB2 <- dB_getMETEO(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/", header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt", station = "B2", cols = c("Rain","WindSpeed","WindDirection","RH","Temp","SolarRadiation","NetRs","NetRl"))
meteoB2 <- dB_getMETEO(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/", header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt", station = "B2", cols = c("Rain","WindSpeed","WindDirection","RH","Temp","SolarRadiation","NetRs","NetRl"))
str(meteoB2)
aggr_vec <- floor(as.numeric(time(meteoB2)) * 24)
meteoB2_h <- aggregate(x = meteoB2, by = aggr_vec, FUN = mean,
na.rm = F)
meteoB2_h <- zoo(x = coredata(meteoB2_h), order.by = chron(time(meteoB2)/24))
meteoB2_h <- zoo(x = coredata(meteoB2_h), order.by = chron(time(meteoB2_h)/24))
str(meteoB2_h)
str(meteoB2)
summary(meteoB2_h)
meteoB2_h <- zoo(coredata(meteoB2_h), as.POSIXlt(time(meteoB2_h), tz="GMT"))
data(observed_mrd)
SWP_B2 <- dB_getSWP(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/", header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt", station = "B", station_nr = 2, aggregation = "h")
SoilT_B2 <- dB_getSoilTemp(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/", header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt", station = "B", station_nr = 2, aggregation = "h")
str(SoilT_B2)
plot(SoilT_B2)
B2 <- merge(meteoB2_h, B2)
B2 <- merge(meteoB2_h, B2$z0005, B2$z0020)
str(B2)
data()
data(validation)
View(EnergyFluxes_df)
EnergyFluxes <- zoo(x=EnergyFluxes_df[,c(2,3)],
order.by=as.POSIXlt(x=strptime(as.character(EnergyFluxes_df$Date_Time), format = "%d/%m/%Y %H:%M")))
str(EnergyFluxes)
View(EnergyFluxes_df)
EnergyFluxes <- zoo(x=EnergyFluxes_df[,c(2,3)],
order.by=as.POSIXlt(x=strptime(as.character(EnergyFluxes_df$Date_Time), format = "%d/%m/%Y %H:%M"), tz = "GMT"))
EnergyFluxes_daily <- aggregate(x = EnergyFluxes, by = as.Date(time(EnergyFluxes)), FUN = mean, na.rm=TRUE)
View(ET_B2)
ET_B2 <- zoo(x=ET_B2$ET_mm_d, order.by=as.Date(x=ET_B2$date,format="%d.%m.%y"))
B2_d <- merge(EnergyFluxes_daily, ET_B2)
plot(B2_d)
str(ET_B2)
str(B2_d)
str(EnergyFluxes)
names(meteoB2)
names(meteoB2_h)
str(meteoB2_h)
dimnames(meteoB2_h)
plot(meteoB2)
library(zoo)
library(chron)
plot(meteoB2_h)
meteoB2_h$Rain <- aggregate(x = meteoB2$Rain, by = aggr_vec, FUN = sum, na.rm = F)
plot(meteoB2_h)
meteoB2_d <- zoo(coredata(meteoB2_h), as.Date(time(meteoB2_h), tz="GMT"))
meteoB2_d <- aggregate(x = meteoB2_h, by = as.Date(time(meteoB2_h)), FUN = mean)
plot(meteoB2_d)
plot(meteoB2_d$Rain*24)
data(observed_mrd)
meteoB2_d$Rain <- meteoB2_d$Rain*24
plot(meteoB2_d)
B2_h <- merge(meteoB2_h, B2$z0005, B2$z0020)
library(DataBaseAlpEnvEURAC)
library(SoilMoisturePattern)
library(zoo)
library(chron)
library(DataBaseAlpEnvEURAC)
library(SoilMoisturePattern)
library(zoo)
library(chron)
meteoB2 <- dB_getMETEO(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/", header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt", station = "B2", cols = c("Rain","WindSpeed","WindDirection","RH","Temp","SolarRadiation","NetRs","NetRl"))
data(observed_mrd)
data(validation)
aggr_vec <- floor(as.numeric(time(meteoB2)) * 24)
meteoB2_h <- aggregate(x = meteoB2, by = aggr_vec, FUN = mean,
na.rm = F)
meteoB2_h <- zoo(x = coredata(meteoB2_h), order.by = chron(time(meteoB2_h)/24))
meteoB2_h$Rain <- aggregate(x = meteoB2$Rain, by = aggr_vec, FUN = sum, na.rm = F)
meteoB2_h <- zoo(coredata(meteoB2_h), as.POSIXlt(time(meteoB2_h), tz="GMT"))
meteoB2_d <- aggregate(x = meteoB2_h, by = as.Date(time(meteoB2_h)), FUN = mean)
meteoB2_d$Rain <- meteoB2_d$Rain*24
EnergyFluxes <- zoo(x=EnergyFluxes_df[,c(2,3)],
order.by=as.POSIXlt(x=strptime(as.character(EnergyFluxes_df$Date_Time), format = "%d/%m/%Y %H:%M"), tz = "GMT"))
EnergyFluxes_daily <- aggregate(x = EnergyFluxes, by = as.Date(time(EnergyFluxes)), FUN = mean, na.rm=TRUE)
ET_B2 <- zoo(x=ET_B2$ET_mm_d, order.by=as.Date(x=ET_B2$date,format="%d.%m.%y"))
B2_h <- merge(meteoB2_h, B2$z0005, B2$z0020)
B2_d <- merge(meteoB2_d, EnergyFluxes_daily, ET_B2)
plot(B2_h)
plot(B2_d)
SMC_050_B2_d <- aggregate(B2$z0005, by = as.Date(time(B2$z0005)), FUN = mean)
SMC_200_B2_d <- aggregate(B2$z0020, by = as.Date(time(B2$z0020)), FUN = mean)
plot(SMC_050_B2_d)
plot(SMC_200_B2_d)
str(B2_h)
dimnames(B2_h[[2]])
dimnames(B2_h[2])
dimnames(B2_h)[[2]]
dimnames(B2_h)[[2]] <- c("air_temperature", "relative_humidity", "net_radiation", "rainfall_amount", "wind_speed", "wind_from_direction", "net_downward_shortwave_flux", "net_downward_longwave_flux",
"soil_moisture_content_050_min", "soil_moisture_content_050_mean", "soil_moisture_content_050_max", "soil_moisture_content_050_sd",
"soil_moisture_content_200_min", "soil_moisture_content_200_mean", "soil_moisture_content_200_max", "soil_moisture_content_200_sd")
dimnames(B2_h)[[2]]
dimnames(B2_d)[[2]]
B2_d <- merge(meteoB2_d, SMC_050_B2_d, SMC_200_B2_d, EnergyFluxes_daily, ET_B2)
dimnames(B2_h)[[2]] <- c("air_temperature", "relative_humidity", "net_radiation", "rainfall_amount", "wind_speed", "wind_from_direction", "net_downward_shortwave_flux", "net_downward_longwave_flux",
"soil_moisture_content_050_min", "soil_moisture_content_050_mean", "soil_moisture_content_050_max", "soil_moisture_content_050_sd",
"soil_moisture_content_200_min", "soil_moisture_content_200_mean", "soil_moisture_content_200_max", "soil_moisture_content_200_sd",
"latent_heat_flux_in_air", "senible_heat_flux_in_air", "evapotranspiration_amount")
dimnames(B2_d)[[2]]
dimnames(B2_h)[[2]] <- c("air_temperature", "relative_humidity", "net_radiation", "rainfall_amount", "wind_speed", "wind_from_direction", "net_downward_shortwave_flux", "net_downward_longwave_flux",
"soil_moisture_content_050_min", "soil_moisture_content_050_mean", "soil_moisture_content_050_max", "soil_moisture_content_050_sd",
"soil_moisture_content_200_min", "soil_moisture_content_200_mean", "soil_moisture_content_200_max", "soil_moisture_content_200_sd",
"latent_heat_flux_in_air", "senible_heat_flux_in_air", "evapotranspiration_amount")
a <- c("air_temperature", "relative_humidity", "net_radiation", "rainfall_amount", "wind_speed", "wind_from_direction", "net_downward_shortwave_flux", "net_downward_longwave_flux",
"soil_moisture_content_050_min", "soil_moisture_content_050_mean", "soil_moisture_content_050_max", "soil_moisture_content_050_sd",
"soil_moisture_content_200_min", "soil_moisture_content_200_mean", "soil_moisture_content_200_max", "soil_moisture_content_200_sd",
"latent_heat_flux_in_air", "senible_heat_flux_in_air", "evapotranspiration_amount")
length(a)
length(dimnames(B2_d)[[2]])
dimnames(B2_d)[[2]] <- c("air_temperature", "relative_humidity", "net_radiation", "rainfall_amount", "wind_speed", "wind_from_direction", "net_downward_shortwave_flux", "net_downward_longwave_flux",
"soil_moisture_content_050_min", "soil_moisture_content_050_mean", "soil_moisture_content_050_max", "soil_moisture_content_050_sd",
"soil_moisture_content_200_min", "soil_moisture_content_200_mean", "soil_moisture_content_200_max", "soil_moisture_content_200_sd",
"latent_heat_flux_in_air", "senible_heat_flux_in_air", "evapotranspiration_amount")
write.zoo(x = B2_d, file = "/home/jbr/Schreibtisch/observerd_B2_d.csv", row.names = F)
round(B2_d,2)
B2_h <- round(B2_h,3)
B2_d <- round(B2_d,3)
write.zoo(x = B2_d, file = "/home/jbr/Schreibtisch/observerd_B2_d.csv", row.names = F,sep=",")
write.zoo(x = B2_h, file = "/home/jbr/Schreibtisch/observerd_B2_d.csv", row.names = F, sep=",")
write.zoo(x = B2_h, file = "/home/jbr/Schreibtisch/observerd_B2_h.csv", row.names = F, sep=",")
write.zoo(x = B2_d, file = "/home/jbr/Schreibtisch/observerd_B2_d.csv", row.names = F, sep=",")
write.zoo(x = B2_h, file = "/home/jbr/Schreibtisch/observerd_B2_h.csv", row.names = F, sep=",", quote=F)
write.zoo(x = B2_h, file = "/home/jbr/Schreibtisch/observerd_B2_h.csv", row.names = F, sep=",", quote=F)
write.zoo(x = B2_d, file = "/home/jbr/Schreibtisch/observerd_B2_d.csv", row.names = F, sep=",", quote=F)
save(list = c("B2_h", "B2_d"), file = "./data/observations_B2")
save(list = c("B2_h", "B2_d"), file = "./data/observations_B2.RData")
obs   <- list(hour=B2_h, day=B2_d)
library(shiny)
names(obs)
names(obs)=="hour"
any(names(obs)=="hour")
names(obs$day) %in% names(obs$hour)
names(obs$day)
which(names(obs$day) %in% names(obs$hour))
if (any(names(obs)=="hour") & any(names(obs)=="day")) which(! names(obs$day) %in% names(obs$hour))
if (any(names(obs)=="hour") & any(names(obs)=="day")) Donly <- which(! names(obs$day) %in% names(obs$hour)) else Donly <- NULL
Donly
!is.null(Donly)
if (!is.null(Donly)) base <- obs$day else base <- obs$hour
if (!is.null(Donly)) base <- obs$day else base <- obs$hour
View(base)
data()
data(lookup_tbl_observation)
View(lookup_tbl_observation)
?merge
merge(names(base), lookup_tbl_observation)
names(base)
View(lookup_tbl_observation)
merge(names(base), lookup_tbl_observation, all.y=T)
View(lookup_tbl_observation)
as.data.frame(obs_var=names(base))
as.data.frame(names(base))
merge(as.data.frame(names(base)), lookup_tbl_observation, all.y=T)
as.data.frame(names(base))
merge(as.data.frame(names(base)), lookup_tbl_observation, all.x=T)
a <- merge(as.data.frame(names(base)), lookup_tbl_observation, by.y = obs_var)
a <- merge(as.data.frame(names(base)), lookup_tbl_observation, by.y = "obs_var")
a <- merge(as.data.frame(names(base)), lookup_tbl_observation)
str(a)
str(lookup_tbl_observation)
lookup_tbl_observation <- as.character(lookup_tbl_observation)
str(lookup_tbl_observation)
lookup_tbl_observation_ <- apply(lookup_tbl_observation, 2, as.character)
as.character(lookup_tbl_observation[,1])
data(lookup_tbl_observation)
lookup_tbl_observation$obs_var
lookup_tbl_observation_ <- apply(lookup_tbl_observation, 2, as.character)
str(lookup_tbl_observation_)
View(lookup_tbl_observation_)
lookup_tbl_observation <- as.data.frame(lookup_tbl_observation)
str(lookup_tbl_observation)
a <- merge(as.data.frame(names(base)), lookup_tbl_observation, by.x="names(base)", by.y = "obs_var")
str(a)
names(base)
View(a)
dimnames(B2_d)[[2]] <- c("air_temperature", "relative_humidity", "net_radiation", "rainfall_amount", "wind_speed", "wind_from_direction", "net_downward_shortwave_flux", "net_downward_longwave_flux",
"soil_moisture_content_050_min", "soil_moisture_content_050_mean", "soil_moisture_content_050_max", "soil_moisture_content_050_sd",
"soil_moisture_content_200_min", "soil_moisture_content_200_mean", "soil_moisture_content_200_max", "soil_moisture_content_200_sd",
"latent_heat_flux_in_air", "sensible_heat_flux_in_air", "evapotranspiration_amount")
write.zoo(x = B2_d, file = "/home/jbr/Schreibtisch/observerd_B2_d.csv", row.names = F, sep=",", quote=F)
save(list=c("B2_h","B2_d"), file = "/home/jbr/GitHub/AnalyseGEOtop/data/observations_B2.RData")
wpath <- "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/Montecini_pnt_1_225_B2_011/"
obs   <- list(hour=B2_h, day=B2_d)
data(lookup_tbl_observation)
lookup_tbl_observation <- apply(lookup_tbl_observation, 2, as.character)
lookup_tbl_observation <- as.data.frame(lookup_tbl_observation)
if (any(names(obs)=="hour") & any(names(obs)=="day")) Donly <- which(! names(obs$day) %in% names(obs$hour)) else Donly <- NULL
if (!is.null(Donly)) base <- obs$day else base <- obs$hour
a <- merge(as.data.frame(names(base)), lookup_tbl_observation, by.x="names(base)", by.y = "obs_var")
str(a)
str(as.data.frame(names(base))
)
as.data.frame(as.character(names(base)))
str(as.data.frame(as.character(names(base))))
as.character(as.data.frame(names(base)))
df_names <- as.data.frame(names(base))
df_names <- as.character(df_names)
str(df_names)
df_names <- as.data.frame(names(base))
df_names[,1] <- as.character(df_names[,1])
str(df_names)
a <- merge(df_names, lookup_tbl_observation, by.x="names(base)", by.y = "obs_var")
str(a)
str(lookup_tbl_observation)
data(lookup_tbl_observation)
lookup_tbl_observation <- apply(lookup_tbl_observation, 2, as.character)
lookup_tbl_observation <- as.data.frame(lookup_tbl_observation)
str(lookup_tbl_observation)
data(lookup_tbl_observation)
if (any(names(obs)=="hour") & any(names(obs)=="day")) Donly <- which(! names(obs$day) %in% names(obs$hour)) else Donly <- NULL
if (!is.null(Donly)) base <- obs$day else base <- obs$hour
df_names <- as.data.frame(names(base))
a <- merge(df_names, lookup_tbl_observation, by.x="names(base)", by.y = "obs_var")
str(a)
str(a$`names(base)`)
as.character(a$`names(base)`)
data(lookup_tbl_observation)
if (any(names(obs)=="hour") & any(names(obs)=="day")) Donly <- which(! names(obs$day) %in% names(obs$hour)) else Donly <- NULL
if (!is.null(Donly)) base <- obs$day else base <- obs$hour
df_names <- as.data.frame(names(base))
varPointIn <- merge(df_names, lookup_tbl_observation, by.x="names(base)", by.y = "obs_var")
varPointIn$geotop_what
varPointIn$geotop_where
if (file.exists(file.path(wpath,"listpoints.txt")))
{
listpoints <- read.csv(file.path(wpath,"listpoints.txt"))
xpoints <- listpoints$xcoord
ypoints <- listpoints$ycoord
} else {
xpoints <- get.geotop.inpts.keyword.value("CoordinatePointX",wpath=wpath,numeric=T)
ypoints <- get.geotop.inpts.keyword.value("CoordinatePointY",wpath=wpath,numeric=T)
}
xpoints
level <- 1:length(xpoints)
point_data <- get.geotop.inpts.keyword.value(keyword="PointOutputFile", wpath=wpath,
raster=FALSE,
data.frame=TRUE,
#  start_date=as.POSIXct(start),
#  end_date=as.POSIXct(end),
level=level,
date_field="Date12.DDMMYYYYhhmm.",
tz="Etc/GMT+1")
library(geotopbricks)
point_data <- get.geotop.inpts.keyword.value(keyword="PointOutputFile", wpath=wpath,
raster=FALSE,
data.frame=TRUE,
#  start_date=as.POSIXct(start),
#  end_date=as.POSIXct(end),
level=level,
date_field="Date12.DDMMYYYYhhmm.",
tz="Etc/GMT+1")
str(point_data)
varPointIn
View(varPointIn)
View(point_data)
varPointIn$geotop_where=="PointOutputFile"
varPointIn_what_direct <- varPointIn$geotop_what[varPointIn$geotop_where=="PointOutputFile"]
varPointIn_what_direct
point_data_out <- point_data[,varPointIn_what_direct]
View(point_data_out)
varPointIn_what_direct
i=varPointIn_what_direct[1]
i
grep("%",i)
i=varPointIn_what_direct[2]
grep("%",i)
strsplit(i,"%")
strsplit(i,"*")
strsplit(i,"_")
i
strsplit(as.character(i),"%")
varPointIn_name_direct <- varPointIn$`names(base)`[varPointIn$geotop_where=="PointOutputFile"]
varPointIn_name_direct
i=1
var <- as.character(varPointIn_what_direct)[i]
var
i=2
var <- as.character(varPointIn_what_direct)[i]
if (grep("%",i)==1) {
i_split <- strsplit(as.character(var),"%")
data_ <- point_data[,i_split[[1]][1]] + point_data[,i_split[[1]][2]]
} else {
data_ <- point_data[,var]
}
grep("%",var)==1
if (grep("%",var)==1) {
i_split <- strsplit(as.character(var),"%")
data_ <- point_data[,i_split[[1]][1]] + point_data[,i_split[[1]][2]]
} else {
data_ <- point_data[,var]
}
plot(data_)
var_out <- list()
for (i in 1:length(varPointIn_what_direct))
{
var <- as.character(varPointIn_what_direct)[i]
if (grep("%",var)==1) {
i_split <- strsplit(as.character(var),"%")
data_ <- point_data[,i_split[[1]][1]] + point_data[,i_split[[1]][2]]
} else {
data_ <- point_data[,var]
}
var_out[[var]] <- data_
}
?grep
var
grep("%",var, value = FALSE)
is.null(grep("%",var, value = FALSE))
var
str(grep("%",var, value = FALSE))
strsplit(as.character(var),"%")
var_out <- list()
for (i in 1:length(varPointIn_what_direct))
{
var <- as.character(varPointIn_what_direct)[i]
i_split <- strsplit(as.character(var),"%")
if (length(i_split[[1]]==1)) {
data_ <- point_data[,var]
} else {
data_ <- point_data[,i_split[[1]][1]] + point_data[,i_split[[1]][2]]
}
var_out[[var]] <- data_
}
i
i_split[[1]][1]
i_split[[1]][2]
var
data_ <- point_data[,i_split[[1]][1]] + point_data[,i_split[[1]][2]]
plot(data_)
1:length(varPointIn_what_direct)
varPointIn_what_direct
var_out <- list()
for (i in 1:length(varPointIn_what_direct))
{
var <- as.character(varPointIn_what_direct)[i]
i_split <- strsplit(as.character(var),"%")
if (length(i_split[[1]]==1)) {
var_out[[var]] <- point_data[,var]
} else {
var_out[[ i_split[[1]][1] ]] <- point_data[ ,i_split[[1]][1] ]
var_out[[ i_split[[1]][2] ]] <- point_data[ ,i_split[[1]][2] ]
var_out[[var]] <- point_data[ ,i_split[[1]][1] ] + point_data[ ,i_split[[1]][2] ]
}
}
i
var <- as.character(varPointIn_what_direct)[i]
i_split <- strsplit(as.character(var),"%")
var_out[[ i_split[[1]][1] ]] <- point_data[ ,i_split[[1]][1] ]
var_out[[ i_split[[1]][2] ]] <- point_data[ ,i_split[[1]][2] ]
var_out[[var]] <- point_data[ ,i_split[[1]][1] ] + point_data[ ,i_split[[1]][2] ]
str(var_out)
var_out <- list()
for (i in 1:length(varPointIn_what_direct))
{
name <- as.character(varPointIn_name_direct)[i]
var <- as.character(varPointIn_what_direct)[i]
i_split <- strsplit(as.character(var),"%")
if (length(i_split[[1]]==1)) {
var_out[[name]] <- point_data[,var]
} else {
var_out[[ i_split[[1]][1] ]] <- point_data[ ,i_split[[1]][1] ]
var_out[[ i_split[[1]][2] ]] <- point_data[ ,i_split[[1]][2] ]
var_out[[name]] <- point_data[ ,i_split[[1]][1] ] + point_data[ ,i_split[[1]][2] ]
}
}
str(var_out)
length(i_split[[1]]==1
)
length(i_split[[1]]==1)
i=1
name <- as.character(varPointIn_name_direct)[i]
var <- as.character(varPointIn_what_direct)[i]
i_split <- strsplit(as.character(var),"%")
length(i_split[[1]]==1)
var_out <- list()
for (i in 1:length(varPointIn_what_direct))
{
name <- as.character(varPointIn_name_direct)[i]
var <- as.character(varPointIn_what_direct)[i]
i_split <- strsplit(as.character(var),"%")
if (length(i_split[[1]])==1) {
var_out[[name]] <- point_data[,var]
} else {
var_out[[ i_split[[1]][1] ]] <- point_data[ ,i_split[[1]][1] ]
var_out[[ i_split[[1]][2] ]] <- point_data[ ,i_split[[1]][2] ]
var_out[[name]] <- point_data[ ,i_split[[1]][1] ] + point_data[ ,i_split[[1]][2] ]
}
}
i
name
