install.packages('animation', repos = 'http://rforge.net', type = 'source')
install.packages('animation', repos = 'http://rforge.net', type = 'source')
install.packages('animation', repos = 'http://rforge.net', type = 'source')
install.packages("animation", repos = "http://rforge.net", type = "source")
library("animation", lib.loc="~/R/win-library/3.0")
path.to.convert <- paste0(shortPathName("C:\\ImageMagick\\"), "convert.exe")
path.to.convert <- paste0(shortPathName(path2convert), "convert.exe")
oopt <- ani.options(convert = path.to.convert, loop=TRUE, autoplay=TRUE, use.dev=TRUE)
?saveGIF
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
oopt <- ani.options(convert = "convert")
saveGIF(  for (d in 1:length(dates))
{
GEOtop_ReadPlotRst(map = pointerMAPS[[i]][d], date = dates[d], variable = variable, layer = i,
limits = limits, legend = legend, lowcol = lowcol, highcol = highcol)
}, interval = .2, movie.name=paste(variable,"_L",layer,".gif", sep=""), convert="convert")
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
ani.options()
library(geotopbricks)
library(ggplot2)
wpath <- "Y:/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/Mazia/Discharge/WG1_005/"
mapkey <- "SoilLiqContentTensorFile"
layers=c(1,2)
soil_files=F
variable="SMC"
limits=c(0,0.6)
legend="vol%"
lowcol="#f7fbff"
highcol="#08306b"
start <- get.geotop.inpts.keyword.value("InitDateDDMMYYYYhhmm",date=TRUE,wpath=wpath,
tz="UTC") + 24*60*60
start <- as.Date(start)
end <- get.geotop.inpts.keyword.value("EndDateDDMMYYYYhhmm",date=TRUE,wpath=wpath,tz="UTC")
end <- as.Date(end)
dates <- seq(from = start, to = end, by = 1)
# number of layers
# soil saturation and layer thickness from soil input
if (soil_files) {
nr_soiltypes <- get.geotop.inpts.keyword.value(keyword="SoilLayerTypes", wpath=wpath, numeric=TRUE)
soil_map <- get.geotop.inpts.keyword.value(keyword = "SoilMapFile", raster = T, wpath=wpath, isNA = -9999)
soil_map@data@values[soil_map@data@values==-9999] <- NA
soil_type_summary <- summary(as.factor(soil_map@data@values))
soil_type_ratio   <- soil_type_summary[!names(soil_type_summary)=="NA's"] / sum(soil_type_summary[!names(soil_type_summary)=="NA's"])
soil_input <- get.geotop.inpts.keyword.value(keyword="SoilParFile", wpath=wpath, data.frame=TRUE,
level = 1:nr_soiltypes)
soil_thickness_header <- get.geotop.inpts.keyword.value(keyword="HeaderSoilDz", wpath=wpath)
soil_saturation_header <- get.geotop.inpts.keyword.value(keyword="HeaderThetaSat", wpath=wpath)
if (is.list(soil_input)) {
soil_thickness <- soil_input[[1]][,soil_thickness_header]
saturation_ratio_mat <- c()
for (i in names(soil_type_ratio))
{
saturation_ratio_mat <- cbind(saturation_ratio_mat, soil_input[[as.integer(i)]][,soil_saturation_header] * soil_type_ratio[i])
}
soil_saturation <- rowSums(saturation_ratio_mat)
} else {
soil_thickness <- soil_input[,soil_thickness_header]
soil_saturation <- soil_input[,soil_saturation_header]
}
} else {
soil_saturation <- get.geotop.inpts.keyword.value(keyword="ThetaSat", wpath=wpath, numeric=T)
soil_thickness <- get.geotop.inpts.keyword.value("SoilLayerThicknesses", numeric = T, wpath=wpath)
}
nlayers <- length(soil_thickness)
name_maps <- get.geotop.inpts.keyword.value(keyword = mapkey, wpath=wpath)
name_maps
i
pdf(file = file.path(wpath,paste("pdf/",variable,"_L",i,"_D",dates[d],".pdf",sep="")))
GEOtop_ReadPlotRst(map = pointerMAPS[[i]][d], date = dates[d], variable = variable, layer = i,
limits = limits, legend = legend, lowcol = lowcol, highcol = highcol)
dir.create(file.path(wpath,"pdf"))
for (d in 1:length(dates))
{
pdf(file = file.path(wpath,paste("pdf/",variable,"_L",i,"_D",dates[d],".pdf",sep="")))
GEOtop_ReadPlotRst(map = pointerMAPS[[i]][d], date = dates[d], variable = variable, layer = i,
limits = limits, legend = legend, lowcol = lowcol, highcol = highcol)
dev.off()
#       saveGIF(  for (d in 1:length(dates))
#       {
#         GEOtop_ReadPlotRst(map = pointerMAPS[[i]][d], date = dates[d], variable = variable, layer = i,
#                            limits = limits, legend = legend, lowcol = lowcol, highcol = highcol)
#       }, interval = .2, movie.name=paste(variable,"_L",layer,".gif", sep=""), convert="convert")
}
dev.off()
i=1
dates
dates=dates[1:5]
layer
i
wpath
for (d in 1:length(dates))
{
pdf(file = file.path(wpath,paste("pdf/",variable,"_L",i,"_D",dates[d],".pdf",sep="")))
GEOtop_ReadPlotRst(map = pointerMAPS[[i]][d], date = dates[d], variable = variable, layer = i,
limits = limits, legend = legend, lowcol = lowcol, highcol = highcol)
dev.off()
#       saveGIF(  for (d in 1:length(dates))
#       {
#         GEOtop_ReadPlotRst(map = pointerMAPS[[i]][d], date = dates[d], variable = variable, layer = i,
#                            limits = limits, legend = legend, lowcol = lowcol, highcol = highcol)
#       }, interval = .2, movie.name=paste(variable,"_L",layer,".gif", sep=""), convert="convert")
}
i
d
GEOtop_ReadPlotRst(map = pointerMAPS[[i]][d], date = dates[d], variable = variable, layer = i,
limits = limits, legend = legend, lowcol = lowcol, highcol = highcol)
dir.create(file.path(wpath,"pdf"))
for (d in 1:length(dates))
{
png(file.path(wpath,paste("pdf/",variable,"_L",i,"_D",dates[d],".png",sep="")))
GEOtop_ReadPlotRst(map = pointerMAPS[[i]][d], date = dates[d], variable = variable, layer = i,
limits = limits, legend = legend, lowcol = lowcol, highcol = highcol)
dev.off()
#       saveGIF(  for (d in 1:length(dates))
#       {
#         GEOtop_ReadPlotRst(map = pointerMAPS[[i]][d], date = dates[d], variable = variable, layer = i,
#                            limits = limits, legend = legend, lowcol = lowcol, highcol = highcol)
#       }, interval = .2, movie.name=paste(variable,"_L",layer,".gif", sep=""), convert="convert")
}
dir.create(file.path(wpath,"png"))
for (d in 1:length(dates))
{
png(file.path(wpath,paste("png/",variable,"_L",i,"_D",dates[d],".png",sep="")))
GEOtop_ReadPlotRst(map = pointerMAPS[[i]][d], date = dates[d], variable = variable, layer = i,
limits = limits, legend = legend, lowcol = lowcol, highcol = highcol)
dev.off()
#       saveGIF(  for (d in 1:length(dates))
#       {
#         GEOtop_ReadPlotRst(map = pointerMAPS[[i]][d], date = dates[d], variable = variable, layer = i,
#                            limits = limits, legend = legend, lowcol = lowcol, highcol = highcol)
#       }, interval = .2, movie.name=paste(variable,"_L",layer,".gif", sep=""), convert="convert")
}
?png
dir.create(file.path(wpath,"png"))
for (d in 1:length(dates))
{
png(file.path(wpath,paste("png/",variable,"_L",i,"_D",dates[d],".png",sep="")), type = "cairo")
GEOtop_ReadPlotRst(map = pointerMAPS[[i]][d], date = dates[d], variable = variable, layer = i,
limits = limits, legend = legend, lowcol = lowcol, highcol = highcol)
dev.off()
#       saveGIF(  for (d in 1:length(dates))
#       {
#         GEOtop_ReadPlotRst(map = pointerMAPS[[i]][d], date = dates[d], variable = variable, layer = i,
#                            limits = limits, legend = legend, lowcol = lowcol, highcol = highcol)
#       }, interval = .2, movie.name=paste(variable,"_L",layer,".gif", sep=""), convert="convert")
}
source('~/GitHub/AnalyseGEOtop/R/GEOtop_AnimateMaps.R', echo=TRUE)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_AnimateMaps.R', echo=TRUE)
?get.geotop.inpts.keyword.value
library(geotopbricks)
?get.geotop.inpts.keyword.value
library(AnalyseGeotop)
library("DataBaseAlpEnvEURAC", lib.loc="~/R/win-library/3.0")
library("DataBaseAlpEnvEURAC", lib.loc="~/R/win-library/3.0")
remove.packages("DataBaseAlpEnvEURAC", lib="~/R/win-library/3.0")
library(devtools)
install_github(repo = "JBrenn/DataBaseAlpEnvEURAC")
library(DataBaseAlpEnvEURAC)
?dB_readZRX
?dB_readZRX2station
library(AnalyseGeotop)
wpath <- "Y:/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/Mazia/Discharge/WG1_005/"
mapkey <- "SoilLiqContentTensorFile"
mapkey <- "SWEMapFile"
layers=NULL
soil_files=F
variable="SWE"
limits=c(0,300)
legend="mm"
lowcol="#f7fbff"
highcol="#08306b"
# extract start and end of simulation
start <- get.geotop.inpts.keyword.value("InitDateDDMMYYYYhhmm",date=TRUE,wpath=wpath,
tz="UTC") + 24*60*60
start <- as.Date(start)
end <- get.geotop.inpts.keyword.value("EndDateDDMMYYYYhhmm",date=TRUE,wpath=wpath,tz="UTC")
end <- as.Date(end)
dates <- seq(from = start, to = end, by = 1)
# number of layers
# soil saturation and layer thickness from soil input
if (soil_files) {
nr_soiltypes <- get.geotop.inpts.keyword.value(keyword="SoilLayerTypes", wpath=wpath, numeric=TRUE)
soil_map <- get.geotop.inpts.keyword.value(keyword = "SoilMapFile", raster = T, wpath=wpath, isNA = -9999)
soil_map@data@values[soil_map@data@values==-9999] <- NA
soil_type_summary <- summary(as.factor(soil_map@data@values))
soil_type_ratio   <- soil_type_summary[!names(soil_type_summary)=="NA's"] / sum(soil_type_summary[!names(soil_type_summary)=="NA's"])
soil_input <- get.geotop.inpts.keyword.value(keyword="SoilParFile", wpath=wpath, data.frame=TRUE,
level = 1:nr_soiltypes)
soil_thickness_header <- get.geotop.inpts.keyword.value(keyword="HeaderSoilDz", wpath=wpath)
soil_saturation_header <- get.geotop.inpts.keyword.value(keyword="HeaderThetaSat", wpath=wpath)
if (is.list(soil_input)) {
soil_thickness <- soil_input[[1]][,soil_thickness_header]
saturation_ratio_mat <- c()
for (i in names(soil_type_ratio))
{
saturation_ratio_mat <- cbind(saturation_ratio_mat, soil_input[[as.integer(i)]][,soil_saturation_header] * soil_type_ratio[i])
}
soil_saturation <- rowSums(saturation_ratio_mat)
} else {
soil_thickness <- soil_input[,soil_thickness_header]
soil_saturation <- soil_input[,soil_saturation_header]
}
} else {
soil_saturation <- get.geotop.inpts.keyword.value(keyword="ThetaSat", wpath=wpath, numeric=T)
soil_thickness <- get.geotop.inpts.keyword.value("SoilLayerThicknesses", numeric = T, wpath=wpath)
}
nlayers <- length(soil_thickness)
name_maps <- get.geotop.inpts.keyword.value(keyword = mapkey, wpath=wpath)
dir.create(file.path(wpath,"gif"))
dir.create(file.path(wpath,"pdf"))
is.null(layers)
pointerMAPS <- pointer.to.maps.xyz.time(wpath, map.prefix = name_maps,
suffix = "N%04d.asc",
zoo.index = NULL, ntime=1,
nlayers=length(dates))
pointerMAPS
d=1
p <- GEOtop_ReadPlotRst(map = pointerMAPS[[1]][d], date = dates[d], variable = variable, layer = layers,
limits = limits, legend = legend, lowcol = lowcol, highcol = highcol)
source('~/GitHub/AnalyseGEOtop/R/GEOtop_ReadPlotRst.R', echo=TRUE)
p <- GEOtop_ReadPlotRst(map = pointerMAPS[[1]][d], date = dates[d], variable = variable, layer = layers,
limits = limits, legend = legend, lowcol = lowcol, highcol = highcol)
library(ggplot2)
p <- GEOtop_ReadPlotRst(map = pointerMAPS[[1]][d], date = dates[d], variable = variable, layer = layers,
limits = limits, legend = legend, lowcol = lowcol, highcol = highcol)
str(p)
p
ggsave(filename = file.path(wpath,paste("pdf/",variable,"_D",dates[d],".pdf",sep="")), plot = p)
library(animation)
?saveGIF
setwd("W:/GEOtop_aniMAPS/")
dir.create("pdf")
setwd("W:/GEOtop_aniMAPS/pdf")
ls
for(i in 1:10) {
pdf(paste("plot",i,".pdf,sep="""))
plot(runif(10), ylim = 0:1)
dev.off()
}
for(i in 1:10) {
pdf(paste("plot",i,".pdf,sep="""))
plot(runif(10), ylim = 0:1)
dev.off()
}
for(i in 1:10) {
pdf(paste("plot",i,".pdf",sep=""))
plot(runif(10), ylim = 0:1)
dev.off()
}
for(i in 1:10) {
pdf(paste("plot",i,".pdf",sep=""))
plot(runif(10), ylim = 0:1, main=paste("plot", i))
dev.off()
}
delay_value=5
delay_value==NULL
delay_value==NULL
delay_value==50
is.null(delay_value)
270/12
library(AnalyseGeotop)
library(AnalyseGeotop)
GEOtop_multiplePointPlot_Montecini(path = "Y:/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/",model_run = "Montecini_pnt_1_225_B2_006", stations = "B2", val_aggr = "h",read_data = T, calibration = F, use_swc_liq = T, soil_files = T)
GEOtop_multiplePointPlot_Montecini(path = "Y:/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/",model_run = "Montecini_pnt_1_225_B2_006", stations = "B2", val_aggr = "h",read_data = F, calibration = F, use_swc_liq = T, soil_files = T)
??yearmon
library(zoo)
?as.yearmon
GEOtop_multiplePointPlot_Montecini(path = "Y:/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/",model_run = "Montecini_pnt_1_225_B2_006", stations = "B2", val_aggr = "h",read_data = F, calibration = F, use_swc_liq = T, soil_files = T)
library(xts)
library(chron)
library(zoo)
library(hydroTSM)
library(hydroGOF)
library(geotopbricks)
library(ggplot2)
GEOtop_multiplePointPlot_Montecini(path = "Y:/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/",model_run = "Montecini_pnt_1_225_B2_006", stations = "B2", val_aggr = "h",read_data = F, calibration = F, use_swc_liq = T, soil_files = T)
library("DataBaseAlpEnvEURAC", lib.loc="~/R/win-library/3.0")
library(ggplot2)
library(AnalyseGeotop)
library(geotopbricks)
library(ggplot2)
library(hydroGOF)
library(hydroTSM)
library(zoo)
library(chron)
library(xts)
GEOtop_multiplePointPlot_Montecini(path = "Y:/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/",model_run = "Montecini_pnt_1_225_B2_006", stations = "B2", val_aggr = "h",read_data = F, calibration = F, use_swc_liq = T, soil_files = T)
dev.off()
GEOtop_multiplePointPlot_Montecini(path = "Y:/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/",model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h",read_data = F, calibration = F, use_swc_liq = T, soil_files = T)
GEOtop_multiplePointPlot_Montecini(path = "Y:/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/",model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h",read_data = T, calibration = F, use_swc_liq = T, soil_files = T)
dev.off()
SWCinfo <- read.csv(file = "H:/Projekte/HydroAlp/06_Workspace/BrJ/03_R/GEOtopAnalyse/SWCinfo.txt")
SWCinfo <- read.csv(file = "validation_data/SWCinfo.txt")
View(SWCinfo)
library(AnalyseGeotop)
GEOtop_Read_multipoint(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/",model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h", soil_files = T)
library(AnalyseGeotop)
GEOtop_Read_multipoint(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/",model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h", soil_files = T)
a <- matrix(1:20,ncol = 2)
write.table(file = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/table.txt", x = a)
library(AnalyseGeotop)
GEOtop_Read_multipoint(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h", soil_files = T)
library("DataBaseAlpEnvEURAC", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h", soil_files = T, read_data = F, calibration = F, use_swc_liq = T)
ls
ls()
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h", soil_files = T, read_data = F, calibration = F, use_swc_liq = T)
(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/"
)
model_run = "Montecini_pnt_1_225_P2_002"
stations = "P2"
val_aggr = "h"
soil_files = T
read_data = F
calibration = F
use_swc_liq = T
wpath <- paste(path, model_run, sep="")
fc_classes <- get.geotop.inpts.keyword.value(wpath=wpath, keyword = "CanopyFraction", numeric = T)
library(geotopbricks)
fc_classes <- get.geotop.inpts.keyword.value(wpath=wpath, keyword = "CanopyFraction", numeric = T)
lc <- read.table(paste(wpath,"/listpoints.txt", sep=""), header=T, sep=",")$landcover
fc <- c()
for (i in 1:length(lc)) fc[i] <- fc_classes[lc[i]]
names(fc) <- stations
load(file = paste(wpath,"/point.RData",sep=""))
i="P2"
LE_overcanopy <- fc[i] * (list_station[[i]]$LEg_veg + list_station[[i]]$LEv) + (1-fc[i]) * list_station[[i]]$LEg_unveg
H_overcanopy  <- fc[i] * (list_station[[i]]$Hg_veg + list_station[[i]]$Hv) + (1-fc[i]) * list_station[[i]]$Hg_unveg
meteo <- cbind(list_station[[i]]$airT, list_station[[i]]$P,
#list_station[[i]]$rain_o_canopy,
list_station[[i]]$snow_o_canopy)
et <- cbind(list_station[[i]]$ET, list_station[[i]]$trans_canopy,
list_station[[i]]$evapo_surfac)
ETcumsum <- cbind(cumsum(list_station[[i]]$ET),cumsum(et[,2:3]))
radiation <- cbind(list_station[[i]]$SWin, list_station[[i]]$LWin,
list_station[[i]]$SWbeam, list_station[[i]]$SWdiff,
list_station[[i]]$SWup, list_station[[i]]$LWup,
list_station[[i]]$SWnet, list_station[[i]]$LWnet)
energy <- cbind(list_station[[i]]$LE_soil, list_station[[i]]$H_soil,
list_station[[i]]$SurfEB,
LE_overcanopy, H_overcanopy,
list_station[[i]]$SoilHeat)
swc_soilliq_labs <- paste("soil_liq_", soil_head, sep="")
swc_labs <- paste("SWC_", soil_head, sep="")
if (use_swc_liq) {
swc <- cbind(list_station[[i]][[swc_soilliq_labs[1]]], list_station[[i]][[swc_soilliq_labs[2]]])
for (n in 3:length(swc_soilliq_labs)) {
swc <- cbind(swc, list_station[[i]][[swc_soilliq_labs[n]]])
}
names(swc) <- swc_soilliq_labs
#       swc <- cbind(list_station[[i]]$soil_liq_10, list_station[[i]]$soil_liq_50,  list_station[[i]]$soil_liq_200,
#                        list_station[[i]]$soil_liq_560,list_station[[i]]$soil_liq_1400, list_station[[i]]$soil_liq_3500,
#                        list_station[[i]]$soil_liq_7500, list_station[[i]]$soil_liq_16000, list_station[[i]]$soil_liq_36000)
} else {
swc <- cbind(list_station[[i]][[swc_labs[1]]], list_station[[i]][[swc_labs[2]]])
for (n in 3:length(swc_labs)) {
swc <- cbind(swc, list_station[[i]][[swc_labs[n]]])
}
names(swc) <- swc_labs
#       swc <- cbind(list_station[[i]]$SWC_10, list_station[[i]]$SWC_50,  list_station[[i]]$SWC_200,
#                    list_station[[i]]$SWC_560,list_station[[i]]$SWC_1400, list_station[[i]]$SWC_3500,
#                    list_station[[i]]$SWC_7500, list_station[[i]]$SWC_16000, list_station[[i]]$SWC_36000)
}
soil_temp_labs <- paste("soil_temp_", soil_head, sep="")
soil_temp <- cbind(list_station[[i]][[soil_temp_labs[1]]], list_station[[i]][[soil_temp_labs[2]]])
for (n in 3:length(soil_temp_labs)) soil_temp <- cbind(soil_temp, list_station[[i]][[soil_temp_labs[n]]])
names(soil_temp) <- soil_temp_labs
YsumsP <- aggregate(meteo[,"list_station[[i]]$P"], by = format(time(meteo),"%Y"), FUN = sum, na.rm=T)
YsumsS <- aggregate(meteo[,"list_station[[i]]$snow_o_canopy"], by = format(time(meteo),"%Y"), FUN = sum, na.rm=T)
text <- c("YEAR: Precip (mm) | Snow (%)", paste(time(YsumsS), ": ", round(YsumsP), "|", round(YsumsS/YsumsP*100), sep=""))
plot.zoo(meteo, ylab=c("Tair [°C]", "P [mm]"), screens = c(1,2,2), main=paste(i, " | Meteo",sep=""),
type=c("l","h","h"), col=c(grey(.2,.5), rgb(0,0,.8,.5), "grey80"),
xlab="", sub="x")
text(x=0.25, y=0.52, labels = text[1], cex = 0.8)
for (t in 2:length(text)) text(x=0.15*(t-1), y=0.48, labels = text[t], cex = 0.8)
legend(x = 0.05, y = .45, legend = c("RAIN", "SNOW"), col=c(rgb(0,0,.8,.5), grey(.2,.5)), lwd=3, bty = "n", horiz = T, )
# add yearly precip sum
# Evapotranspiration
library(zoo)
plot.zoo(meteo, ylab=c("Tair [°C]", "P [mm]"), screens = c(1,2,2), main=paste(i, " | Meteo",sep=""),
type=c("l","h","h"), col=c(grey(.2,.5), rgb(0,0,.8,.5), "grey80"),
xlab="", sub="x")
text(x=0.25, y=0.52, labels = text[1], cex = 0.8)
for (t in 2:length(text)) text(x=0.15*(t-1), y=0.48, labels = text[t], cex = 0.8)
legend(x = 0.05, y = .45, legend = c("RAIN", "SNOW"), col=c(rgb(0,0,.8,.5), grey(.2,.5)), lwd=3, bty = "n", horiz = T, )
# add yearly precip sum
SWC <- dB_getSWC(path2files = as.character(SWCinfo[SWCinfo$STATION==i,2]),
header.file = as.character(SWCinfo[SWCinfo$STATION==i,3]),
station = as.character(SWCinfo[SWCinfo$STATION==i,4]),
station_nr = as.integer(substr(SWCinfo[SWCinfo$STATION==i,1],2,2)),
aggregation = val_aggr, calibration = calibration,
minVALUE=.05, maxVALUE=.5, remove_freezing=TRUE)
as.character(SWCinfo[SWCinfo$STATION==i,2])
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h", soil_files = T, read_data = T, calibration = F, use_swc_liq = T)
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h", soil_files = T, read_data = T, calibration = F, use_swc_liq = T)
SWCinfo <- read.csv(file = "validation_data/SWCinfo.txt")
SWCinfo <- read.csv(file = "validation_data/SWCinfo.txt")
SWCinfo <- read.csv2(file = "validation_data/SWCinfo.txt")
View(SWCinfo)
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h", soil_files = T, read_data = T, calibration = F, use_swc_liq = T)
SWCinfo <- read.csv2(file = "validation_data/SWCinfo.txt")
i="P2"
SWC <- dB_getSWC(path2files = as.character(SWCinfo[SWCinfo$STATION==i,2]),
header.file = as.character(SWCinfo[SWCinfo$STATION==i,3]),
station = as.character(SWCinfo[SWCinfo$STATION==i,4]),
station_nr = as.integer(substr(SWCinfo[SWCinfo$STATION==i,1],2,2)),
aggregation = val_aggr, calibration = calibration,
minVALUE=.05, maxVALUE=.5, remove_freezing=TRUE)
path2files = as.character(SWCinfo[SWCinfo$STATION==i,2])
path2files
View(SWCinfo)
SWCinfo <- read.csv2(file = "validation_data/SWCinfo.txt")
View(SWCinfo)
SWC <- dB_getSWC(path2files = as.character(SWCinfo[SWCinfo$STATION==i,2]),
header.file = as.character(SWCinfo[SWCinfo$STATION==i,3]),
station = as.character(SWCinfo[SWCinfo$STATION==i,4]),
station_nr = as.integer(substr(SWCinfo[SWCinfo$STATION==i,1],2,2)),
aggregation = val_aggr, calibration = calibration,
minVALUE=.05, maxVALUE=.5, remove_freezing=TRUE)
str(SWC)
plot(SWC)
library(zoo)
x11()
plot(SWC)
SWC <- dB_getSWC(path2files = as.character(SWCinfo[SWCinfo$STATION==i,2]),
header.file = as.character(SWCinfo[SWCinfo$STATION==i,3]),
station = as.character(SWCinfo[SWCinfo$STATION==i,4]),
station_nr = as.integer(substr(SWCinfo[SWCinfo$STATION==i,1],2,2)),
aggregation = val_aggr, calibration = T,
minVALUE=.05, maxVALUE=.5, remove_freezing=TRUE)
data()
data()
detach("package:DataBaseAlpEnvEURAC", unload=TRUE)
library("DataBaseAlpEnvEURAC", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
rm(calibration)
library("DataBaseAlpEnvEURAC", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
detach("package:DataBaseAlpEnvEURAC", unload=TRUE)
library("DataBaseAlpEnvEURAC", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
calibration
calibration=TRUE
SWC <- dB_getSWC(path2files = as.character(SWCinfo[SWCinfo$STATION==i,2]),
header.file = as.character(SWCinfo[SWCinfo$STATION==i,3]),
station = as.character(SWCinfo[SWCinfo$STATION==i,4]),
station_nr = as.integer(substr(SWCinfo[SWCinfo$STATION==i,1],2,2)),
aggregation = val_aggr, calibration = calibration,
minVALUE=.05, maxVALUE=.5, remove_freezing=TRUE)
calibrate=TRUE
SWC <- dB_getSWC(path2files = as.character(SWCinfo[SWCinfo$STATION==i,2]),
header.file = as.character(SWCinfo[SWCinfo$STATION==i,3]),
station = as.character(SWCinfo[SWCinfo$STATION==i,4]),
station_nr = as.integer(substr(SWCinfo[SWCinfo$STATION==i,1],2,2)),
aggregation = val_aggr, calibration = calibrate,
minVALUE=.05, maxVALUE=.5, remove_freezing=TRUE)
detach("package:DataBaseAlpEnvEURAC", unload=TRUE)
library("DataBaseAlpEnvEURAC", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
library(AnalyseGeotop)
library("DataBaseAlpEnvEURAC", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h", read_data = T, calibrate = F, use_swc_liq = T)
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h", read_data = T, calibrate = F, use_swc_liq = T,soil_files = T)
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h", read_data = T, calibrate = F, use_swc_liq = T,soil_files = T)
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", model_run = "Montecini_pnt_1_225_B2_007", stations = "B2", val_aggr = "h", read_data = T, calibrate = F, use_swc_liq = T,soil_files = T)
SWCinfoLIN <- read.csv("data/SWCinfoLIN.txt")
SWCinfoLIN <- read.csv2("data/SWCinfoLIN.txt")
SWCinfoWIN <- read.csv("data/SWCinfoWIN.txt")
View(SWCinfoLIN)
SWCinfoWIN <- read.csv2("data/SWCinfoWIN.txt")
View(SWCinfoLIN)
View(SWCinfoWIN)
save.image("~/GitHub/AnalyseGEOtop/data/SWCinfo.RData")
library(AnalyseGeotop)
data()
data(SWCinfoLIN)
rm(SWCinfoLIN)
rm(SWCinfoWIN)
ls()
data(SWCinfoLIN)
data(SWCinfoWin)
data(SWCinfoWIN)
SWCinfoLIN
SWCinfoWIN
rm(SWCinfoWIN)
rm(SWCinfoLIN)
load("~/GitHub/AnalyseGEOtop/data/SWCinfo.RData")
library(AnalyseGeotop)
data(
)
library(AnalyseGeotop)
data(
)
data(SWCinfoLIN (SWCinfo))
data(SWCinfoLIN)
data(SWCinfo)
SWCinfoLIN
library(AnalyseGeotop)
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h", read_data = T, calibrate = F, use_swc_liq = T,soil_files = T, linux =T)
library("DataBaseAlpEnvEURAC", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h", read_data = F, calibrate = F, use_swc_liq = T,soil_files = T, linux =T)
detach("package:DataBaseAlpEnvEURAC", unload=TRUE)
remove.packages("DataBaseAlpEnvEURAC", lib="~/R/x86_64-pc-linux-gnu-library/3.1")
library(devtools)
install_github("JBrenn/DataBaseAlpEnvEURAC")
library(DataBaseAlpEnvEURAC)
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h", read_data = F, calibrate = F, use_swc_liq = T,soil_files = T, linux =T)
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h", read_data = F, calibrate = T, use_swc_liq = T,soil_files = T, linux =T)
dev.off()
dev.off()
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", model_run = "Montecini_pnt_1_225_P2_002", stations = "P2", val_aggr = "h", read_data = F, calibrate = T, use_swc_liq = T,soil_files = T, linux =T)
GEOtop_multiplePointPlot_Montecini(path = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/", model_run = "Montecini_pnt_1_225_B2_002", stations = "B2", val_aggr = "h", read_data = T, calibrate = T, use_swc_liq = T,soil_files = T, linux =T)
