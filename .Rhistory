lookup_tbl_observation <- read.csv("data/tbl_observations")
save("lookup_tbl_observation", file = "data/lookup_tbl_observation.RData")
wpath <- "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/Montecini_pnt_1_225_B2_011/"
data("observations_B2")
obs   <- list(hour=B2_h, day=B2_d)
wpath <- "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/Montecini_pnt_1_225_B2_011/"
data("observations_B2")
obs   <- list(hour=B2_h, day=B2_d)
str(obs)
names(obs[[1]])
dimnames(obs[[1]])
dimnames(obs[[2]])
data(lookup_tbl_observation)
if (any(names(obs)=="hour") & any(names(obs)=="day")) Donly <- which(! dimnames(obs$day)[2][[1]] %in% dimnames(obs$hour)[2][[1]]) else Donly <- NULL
if (file.exists(file.path(wpath,"listpoints.txt")))
{
listpoints <- read.csv(file.path(wpath,"listpoints.txt"))
xpoints <- listpoints$xcoord
ypoints <- listpoints$ycoord
} else {
xpoints <- get.geotop.inpts.keyword.value("CoordinatePointX",wpath=wpath,numeric=T)
ypoints <- get.geotop.inpts.keyword.value("CoordinatePointY",wpath=wpath,numeric=T)
}
if (!is.null(Donly)) base <- obs$day else base <- obs$hour
df_names <- as.data.frame(dimnames(base)[2][[1]])
names(df_names) <- "name"
varPointIn <- merge(df_names, lookup_tbl_observation, by.x="name", by.y = "obs_var")
varPointIn_what_direct <- varPointIn$geotop_what[varPointIn$geotop_where=="PointOutputFile"]
varPointIn_name_direct <- varPointIn$name[varPointIn$geotop_where=="PointOutputFile"]
level <- 1:length(xpoints)
# read point data with specified keyword
point_data <- get.geotop.inpts.keyword.value(keyword="PointOutputFile", wpath=wpath,
raster=FALSE,
data.frame=TRUE,
level=level,
date_field="Date12.DDMMYYYYhhmm.",
tz="Etc/GMT+1")
library(geotopbricks)
point_data <- get.geotop.inpts.keyword.value(keyword="PointOutputFile", wpath=wpath,
raster=FALSE,
data.frame=TRUE,
level=level,
date_field="Date12.DDMMYYYYhhmm.",
tz="Etc/GMT+1")
var_out <- list()
for (i in 1:length(varPointIn_what_direct))
{
name <- as.character(varPointIn_name_direct)[i]
var <- as.character(varPointIn_what_direct)[i]
i_split <- strsplit(as.character(var),"%")
if (length(i_split[[1]])==1) {
var_out[[name]] <- point_data[,var]
} else {
var_out[[ i_split[[1]][1] ]] <- point_data[ ,i_split[[1]][1] ]
var_out[[ i_split[[1]][2] ]] <- point_data[ ,i_split[[1]][2] ]
var_out[[name]] <- point_data[ ,i_split[[1]][1] ] + point_data[ ,i_split[[1]][2] ]
}
}
if ("postprocess_LE" %in% varPointIn$geotop_what)
{
LE <- point_data[,c("LEg_veg.W.m2.", "LEg_unveg.W.m2.", "LEv.W.m2.", "Canopy_fraction..." )]
names(LE) <- c("g_veg", "g_unveg", "veg", "cf")
data <- list(LE=LE)
LE <- GEOtop_EfluxOcanopy(data = data)
name <- as.character(varPointIn$name[varPointIn$geotop_what%in%"postprocess_LE"])
var_out[[name]] <- LE[[1]]
}
if ("postprocess_H" %in% varPointIn$geotop_what)
{
H <- point_data[,c("Hg_veg.W.m2.", "Hg_unveg.W.m2.", "Hv.W.m2.", "Canopy_fraction..." )]
names(H) <- c("g_veg", "g_unveg", "veg", "cf")
data <- list(H=H)
H <- GEOtop_EfluxOcanopy(data = data)
name <- as.character(varPointIn$name[varPointIn$geotop_what%in%"postprocess_H"])
var_out[[name]] <- H[[1]]
}
library(AnalyseGeotop)
if ("postprocess_LE" %in% varPointIn$geotop_what)
{
LE <- point_data[,c("LEg_veg.W.m2.", "LEg_unveg.W.m2.", "LEv.W.m2.", "Canopy_fraction..." )]
names(LE) <- c("g_veg", "g_unveg", "veg", "cf")
data <- list(LE=LE)
LE <- GEOtop_EfluxOcanopy(data = data)
name <- as.character(varPointIn$name[varPointIn$geotop_what%in%"postprocess_LE"])
var_out[[name]] <- LE[[1]]
}
if ("postprocess_H" %in% varPointIn$geotop_what)
{
H <- point_data[,c("Hg_veg.W.m2.", "Hg_unveg.W.m2.", "Hv.W.m2.", "Canopy_fraction..." )]
names(H) <- c("g_veg", "g_unveg", "veg", "cf")
data <- list(H=H)
H <- GEOtop_EfluxOcanopy(data = data)
name <- as.character(varPointIn$name[varPointIn$geotop_what%in%"postprocess_H"])
var_out[[name]] <- H[[1]]
}
if (length(sapply(df_names, grep, pattern="soil_moisture_content", value=T)) > 1 |
length(sapply(df_names, grep, pattern="soil_temperature", value=T)) > 1 |
length(sapply(df_names, grep, pattern="liquid_soil_water_pressure", value=T)) > 1)
{
if (soil_files) {
soil_input <- get.geotop.inpts.keyword.value(keyword="SoilParFile", wpath=wpath, data.frame=TRUE)
soil_thickness <- soil_input[,1]
} else {
Dz <- soil_thickness <- get.geotop.inpts.keyword.value("SoilLayerThicknesses", numeric = T, wpath=wpath)
Kh <-     get.geotop.inpts.keyword.value("NormalHydrConductivity", numeric = T, wpath=wpath)
Kv <-     get.geotop.inpts.keyword.value("LateralHydrConductivity", numeric = T, wpath=wpath)
vwc_r <-  get.geotop.inpts.keyword.value("ThetaRes", numeric = T, wpath=wpath)
vwc_w <-  get.geotop.inpts.keyword.value("WiltingPoint", numeric = T, wpath=wpath)
vwc_fc <- get.geotop.inpts.keyword.value("FieldCapacity", numeric = T, wpath=wpath)
vwc_s <-  get.geotop.inpts.keyword.value("ThetaSat", numeric = T, wpath=wpath)
alpha <-  get.geotop.inpts.keyword.value("AlphaVanGenuchten", numeric = T, wpath=wpath)
n <-      get.geotop.inpts.keyword.value("NVanGenuchten", numeric = T, wpath=wpath)
soil_input <- data.frame(Dz,Kh,Kv,vwc_r,vwc_w,vwc_fc,vwc_s,alpha,n)
}
# output depth in mm
soil_head <- diff(c(0,cumsum(soil_thickness)))/2 + c(0,cumsum(soil_thickness))[-length(soil_thickness)-1]
soil_file <- get.geotop.inpts.keyword.value(keyword="SoilLiqContentProfileFile", wpath=wpath, data.frame=TRUE)
soil_time <- as.POSIXct(strptime(x = as.character(soil_file[,1]), format = "%d/%m/%Y %H:%M", tz = "Etc/GMT+1"))
soil_header <- names(soil_file)[-c(1:6)]
}
soil_files=T
if (length(sapply(df_names, grep, pattern="soil_moisture_content", value=T)) > 1 |
length(sapply(df_names, grep, pattern="soil_temperature", value=T)) > 1 |
length(sapply(df_names, grep, pattern="liquid_soil_water_pressure", value=T)) > 1)
{
if (soil_files) {
soil_input <- get.geotop.inpts.keyword.value(keyword="SoilParFile", wpath=wpath, data.frame=TRUE)
soil_thickness <- soil_input[,1]
} else {
Dz <- soil_thickness <- get.geotop.inpts.keyword.value("SoilLayerThicknesses", numeric = T, wpath=wpath)
Kh <-     get.geotop.inpts.keyword.value("NormalHydrConductivity", numeric = T, wpath=wpath)
Kv <-     get.geotop.inpts.keyword.value("LateralHydrConductivity", numeric = T, wpath=wpath)
vwc_r <-  get.geotop.inpts.keyword.value("ThetaRes", numeric = T, wpath=wpath)
vwc_w <-  get.geotop.inpts.keyword.value("WiltingPoint", numeric = T, wpath=wpath)
vwc_fc <- get.geotop.inpts.keyword.value("FieldCapacity", numeric = T, wpath=wpath)
vwc_s <-  get.geotop.inpts.keyword.value("ThetaSat", numeric = T, wpath=wpath)
alpha <-  get.geotop.inpts.keyword.value("AlphaVanGenuchten", numeric = T, wpath=wpath)
n <-      get.geotop.inpts.keyword.value("NVanGenuchten", numeric = T, wpath=wpath)
soil_input <- data.frame(Dz,Kh,Kv,vwc_r,vwc_w,vwc_fc,vwc_s,alpha,n)
}
# output depth in mm
soil_head <- diff(c(0,cumsum(soil_thickness)))/2 + c(0,cumsum(soil_thickness))[-length(soil_thickness)-1]
soil_file <- get.geotop.inpts.keyword.value(keyword="SoilLiqContentProfileFile", wpath=wpath, data.frame=TRUE)
soil_time <- as.POSIXct(strptime(x = as.character(soil_file[,1]), format = "%d/%m/%Y %H:%M", tz = "Etc/GMT+1"))
soil_header <- names(soil_file)[-c(1:6)]
}
if (length(sapply(df_names, grep, pattern="soil_moisture_content", value=T)) > 1)
{
names <- sapply(df_names, grep, pattern="soil_moisture_content", value=T)
strsplit_names <- str_split(names,"_")
split_mat <- matrix(unlist(strsplit_names),nrow = length(names), ncol=length(strsplit_names[[1]]), byrow = T)
depth_mm <- as.integer(unique(split_mat[,4]))
choice <- sapply(depth_mm, function(x) which.min(abs(soil_head-x)))
soil_data <- zoo(soil_file[,soil_header[choice]], soil_time)
for (i in 1:length(depth_mm)) var_out[[paste("soil_moisture_content_", depth_mm[i], sep="")]] <- soil_data[,i]
}
length(sapply(df_names, grep, pattern="soil_moisture_content", value=T)
)
choice
str(var_out)
length(sapply(df_names, grep, pattern="liquid_soil_water_pressure", value=T)
)
soil_file <- get.geotop.inpts.keyword.value(keyword="SoilLiqWaterPressProfileFile", wpath=wpath, data.frame=TRUE)
names <- sapply(df_names, grep, pattern="liquid_soil_water_pressure", value=T)
names
split_mat <- matrix(unlist(strsplit_names),nrow = length(names), ncol=length(strsplit_names[[1]]), byrow = T)
depth_mm <- as.integer(unique(split_mat[,4]))
depth_mm
split_mat
strsplit_names
strsplit_names <- str_split(names,"_")
strsplit_names
names <- sapply(df_names, grep, pattern="liquid_soil_water_pressure", value=T)
strsplit_names <- str_split(names,"_")
split_mat <- matrix(unlist(strsplit_names),nrow = length(names), ncol=length(strsplit_names[[1]]), byrow = T)
split_mat
depth_mm <- as.integer(unique(split_mat[,5]))
depth_mm
choice <- sapply(depth_mm, function(x) which.min(abs(soil_head-x)))
soil_data <- zoo(soil_file[,soil_header[choice]], soil_time)
for (i in 1:length(depth_mm)) var_out[[paste("iquid_soil_water_pressure_", depth_mm[i], sep="")]] <- soil_data[,i]
soil_file <- get.geotop.inpts.keyword.value(keyword="SoilAveragedTempProfileFile", wpath=wpath, data.frame=TRUE)
names <- sapply(df_names, grep, pattern="soil_temperature", value=T)
strsplit_names <- str_split(names,"_")
split_mat <- matrix(unlist(strsplit_names),nrow = length(names), ncol=length(strsplit_names[[1]]), byrow = T)
depth_mm <- as.integer(unique(split_mat[,4]))
split_mat
depth_mm <- as.integer(unique(split_mat[,3]))
choice <- sapply(depth_mm, function(x) which.min(abs(soil_head-x)))
soil_data <- zoo(soil_file[,soil_header[choice]], soil_time)
for (i in 1:length(depth_mm)) var_out[[paste("soil_temperature", depth_mm[i], sep="")]] <- soil_data[,i]
library(shiny)
if(!require(AnalyseGeotop))
{
if(!require(devtools))
{
install.packages(devtools)
require(devtools)
}
install_github("AnalyseGeotop", "JBrenn")
require(AnalyseGeotop)
}
data("PointOutValidation_sim0011_1D_HiResAlp")
str(var_out)
names(var_out)
data("observations_B2")
library(dygraphs)
str(var_out)
ulatio
obs <- list(hour=B2_h, day=B2_d)
fun <- c("mean","sum")
names(fun) <- c("flux", "amount")
fun
fun <- fun_[input$flux_amount]
obs <- list(hour=B2_h, day=B2_d)
fun_ <- c("mean","sum")
names(fun_) <- c("flux", "amount")
fun_["flux"]
expression(fun)
fun <- fun_["flux"]
expression(fun)
fun
c(fun)
expression("mean")
?expression
as.expression("mean")
obs <- list(hour=B2_h, day=B2_d)
obs[["hour"]][,"air_temperature"]
var_out[["air_temperature"]]
input <- c(variable="air_temperature", aggregation="hour", flux_amount="flux")
input
input$variable
input <- as.data.frame(variable="air_temperature", aggregation="hour", flux_amount="flux")
input <- c(variable="air_temperature", aggregation="hour", flux_amount="flux")
library(dygraphs)
?dygraph
names(B2_d)
names(var_out)
if(!require(hydroGOF))
{
install.packages(hydroGOF)
require(hydroGOF)
}
?gof
gof(sim = data$simulation, obs=data$observation)
?GOF
?gof
observation <- obs[["hour"]][,"air_temperature"]
simulation <- var_out[["air_temperature"]]
data <- merge(observation, simulation)
gofs <- gof(sim = data$simulation, obs=data$observation, na.rm = T)
str(gofs)
gofs <- as.data.frame(gofs)
names(gofs)
dimnames(gofs)
gofs$GOF <- dimnames(gofs)[[1]]
str(gofs)
gofs <- gof(sim = data$simulation, obs=data$observation, na.rm = T)
gofs <- as.data.frame(gofs)
names(gofs) <- "VALUE"
gofs$GOF <- dimnames(gofs)[[1]]
str(gofs)
gofs <- gofs[,c(2,1)]
str(gofs)
lookup_tbl_observation <- read.csv("data/tbl_observations",header=T)
View(lookup_tbl_observation)
save("lookup_tbl_observation", file = "data/lookup_tbl_observation.RData")
load("~/GitHub/AnalyseGEOtop/data/lookup_tbl_observation.RData")
View(lookup_tbl_observation)
load("~/GitHub/AnalyseGEOtop/data/lookup_tbl_observation.RData")
View(lookup_tbl_observation)
remove.packages("AnalyseGeotop", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
data("PointOutValidation_sim0007_1D_HiResAlp")
data("observations_B2")
data("lookup_tbl_observation")
str(time(B2_h))
if(!require(AnalyseGeotop))
{
if(!require(devtools))
{
install.packages(devtools)
require(devtools)
}
install_github("AnalyseGeotop", "JBrenn")
require(AnalyseGeotop)
}
if(!require(dygraphs))
{
install.packages(dygraphs)
require(dygraphs)
}
if(!require(hydroGOF))
{
install.packages(hydroGOF)
require(hydroGOF)
}
data("PointOutValidation_sim0007_1D_HiResAlp")
data("observations_B2")
data("lookup_tbl_observation")
str(time(B2_h))
str(time(B2_h)- (60*60*24))
B2_h$mday[1]
B2_h$mday
names(unclass(as.POSIXlt("2009-10-04")))
names(unclass(time(B2_h)))
time(B2_h)$mday
time(B2_h$mday) - 1
time(B2_h)$mday - 1
time(B2_h)$mday[1]
time(B2_h)$mday[1] - 1
time(B2_h)[1]
data("PointOutValidation_sim0007_1D_HiResAlp")
#data("PointOutValidation_sim0011_1D_HiResAlp")
data("observations_B2")
data("lookup_tbl_observation")
time(B2_h)[1]
time(B2_h)$mday[1]
test <- time(B2_h)[1]
test
test$mday -1
test$mday <- test$mday -2
test
names(B2_d)
names(var_out)
if(!require(AnalyseGeotop))
{
if(!require(devtools))
{
install.packages(devtools)
require(devtools)
}
install_github("AnalyseGeotop", "JBrenn")
require(AnalyseGeotop)
}
if(!require(dygraphs))
{
install.packages(dygraphs)
require(dygraphs)
}
if(!require(hydroGOF))
{
install.packages(hydroGOF)
require(hydroGOF)
}
data("PointOutValidation_sim0007_1D_HiResAlp")
#data("PointOutValidation_sim0011_1D_HiResAlp")
data("observations_B2")
data("lookup_tbl_observation")
time(B2_h)$mday <- time(B2_h)$mday - 1
time(B2_d) <- time(B2_d) - 1
obs <- list(hour=B2_h, day=B2_d)
names(B2_d)
names(var_out)
remove.packages("AnalyseGeotop", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
View(lookup_tbl_observation)
?renderDygraph
?zoo
?cumsum
str(B2_d)
str(B2_d[,1])
plot(B2_d[,1])
plot(B2_d[,1:2])
plot(cumsum(B2_d[,1:2]))
plot(B2_d[,1:2])
as.Date("01-01-2015")
?na.approx.default
as.Date("30-04-2011",format="%d-%m-%Y")
names(unclass(time(B2_h)))
observation<- obs$day[,"air_temperature"]
simulation <- var_out[["air_temperature"]]
simulation <- aggregate(simulation, as.Date(time(simulation)), mean, na.rm=T)
data <- merge(observation, simulation)
gofs <- gof(sim = data$simulation, obs=data$observation, na.rm = T)
gofs <- as.data.frame(gofs)
names(gofs) <- "YEAR"
gofs$GOF <- dimnames(gofs)[[1]]
str(gofs)
data_djf <-  data[time(data)$mon==12 | time(data)$mon==1 |time(data)$mon==2,]
time(data)$mo
time(data)$mon
time(data)
mon <- as.numeric(format(time(data), "%m"))
mon
data_djf <-  data[mon==12 | mon==1 | mon==2,]
gofs$DJF <-  c(gof(sim = data_djf$simulation, obs=data_djf$observation, na.rm = T))
str(gofs)
data_mam <-  data[mon==3 | on==4 | mon==5,]
gofs$MAM <-  c(gof(sim = data_mam$simulation, obs=data_mam$observation, na.rm = T))
data_jja <-  data[mon==6 | mon==7 | mon==8,]
gofs$JJA <-  c(gof(sim = data_jja$simulation, obs=data_jja$observation, na.rm = T))
data_son <-  data[mon==9 | mon==10 | mon==11,]
gofs$SON <-  c(gof(sim = data_son$simulation, obs=data_son$observation, na.rm = T))
data_mam <-  data[mon==3 | mon==4 | mon==5,]
gofs$MAM <-  c(gof(sim = data_mam$simulation, obs=data_mam$observation, na.rm = T))
str(gofs)
data <- merge(observation, simulation)
gofs <- gof(sim = data$simulation, obs=data$observation, na.rm = T)
gofs <- as.data.frame(gofs)
names(gofs) <- "YEAR"
gofs$GOF <- dimnames(gofs)[[1]]
mon <- as.numeric(format(time(data), "%m"))
data_djf <-  data[mon==12 | mon==1 | mon==2,]
gofs$DJF <-  c(gof(sim = data_djf$simulation, obs=data_djf$observation, na.rm = T))
data_mam <-  data[mon==3 | mon==4 | mon==5,]
gofs$MAM <-  c(gof(sim = data_mam$simulation, obs=data_mam$observation, na.rm = T))
data_jja <-  data[mon==6 | mon==7 | mon==8,]
gofs$JJA <-  c(gof(sim = data_jja$simulation, obs=data_jja$observation, na.rm = T))
data_son <-  data[mon==9 | mon==10 | mon==11,]
gofs$SON <-  c(gof(sim = data_son$simulation, obs=data_son$observation, na.rm = T))
gof <- gof[,c(2,3,4,5,6,1)]
gofs <- gofs[,c(2,3,4,5,6,1)]
str(gofs)
***
library(dygraphs)
?dygraph
lungDeaths <- cbind(mdeaths, fdeaths)
dygraph(lungDeaths)
str(lungDeaths)
library("DataBaseAlpEnvEURAC", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
?dB_getGEOtop
library("geotopbricks", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("AnalyseGeotop", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
library("AnalyseGeotop", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
GEOtop_updateLookUpTbl()
load("~/GitHub/AnalyseGEOtop/data/lookup_tbl_observation.RData")
View(lookup_tbl_observation)
remove.packages("AnalyseGeotop", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("AnalyseGeotop", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
wpath <- "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/MonaLisa/1D/Kaltern/sim006"
load(file.path(wpath, "obs", "observation.RData"))
names(observation) <- c("hour", "day")
obs <- observation
data(lookup_tbl_observation)
if (any(names(obs)=="hour") & any(names(obs)=="day")) Donly <- which(! dimnames(obs$day)[2][[1]] %in% dimnames(obs$hour)[2][[1]]) else Donly <- NULL
if (file.exists(file.path(wpath,"listpoints.txt")))
{
listpoints <- read.csv(file.path(wpath,"listpoints.txt"))
xpoints <- listpoints$xcoord
ypoints <- listpoints$ycoord
} else {
xpoints <- get.geotop.inpts.keyword.value("CoordinatePointX",wpath=wpath,numeric=T)
ypoints <- get.geotop.inpts.keyword.value("CoordinatePointY",wpath=wpath,numeric=T)
}
if (!is.null(Donly)) base <- obs$day else base <- obs$hour
df_names <- as.data.frame(dimnames(base)[2][[1]])
names(df_names) <- "name"
varPointIn <- merge(df_names, lookup_tbl_observation, by.x="name", by.y = "obs_var")
varPointIn_what_direct <- varPointIn$geotop_what[varPointIn$geotop_where=="PointOutputFile"]
varPointIn_name_direct <- varPointIn$name[varPointIn$geotop_where=="PointOutputFile"]
level <- 1:length(xpoints)
point_data <- get.geotop.inpts.keyword.value(keyword="PointOutputFile", wpath=wpath,
raster=FALSE,
data.frame=TRUE,
level=level,
date_field="Date12.DDMMYYYYhhmm.",
tz="Etc/GMT+1")
library(geotopbricks)
point_data <- get.geotop.inpts.keyword.value(keyword="PointOutputFile", wpath=wpath,
raster=FALSE,
data.frame=TRUE,
level=level,
date_field="Date12.DDMMYYYYhhmm.",
tz="Etc/GMT+1")
library(AnalyseGeotop)
var_out <- list()
for (i in 1:length(varPointIn_what_direct))
{
name <- as.character(varPointIn_name_direct)[i]
var <- as.character(varPointIn_what_direct)[i]
i_split <- strsplit(as.character(var),"%")
if (length(i_split[[1]])==1) {
var_out[[name]] <- point_data[,var]
} else {
var_out[[ i_split[[1]][1] ]] <- point_data[ ,i_split[[1]][1] ]
var_out[[ i_split[[1]][2] ]] <- point_data[ ,i_split[[1]][2] ]
var_out[[name]] <- point_data[ ,i_split[[1]][1] ] + point_data[ ,i_split[[1]][2] ]
}
}
i
name <- as.character(varPointIn_name_direct)[i]
var <- as.character(varPointIn_what_direct)[i]
i_split <- strsplit(as.character(var),"%")
name
vsr
var
i_split
varPointIn_what_direct
GEOtop_updateLookUpTbl()
load("~/GitHub/AnalyseGEOtop/data/lookup_tbl_observation.RData")
View(lookup_tbl_observation)
remove.packages("AnalyseGeotop", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
load("/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/MonaLisa/1D/Kaltern/sim006/obs/observation.RData")
names(observation$dataDay)
dimnames(observation$dataDay)
dimnames(observation$data30min)
dimnames(observation$data30min)[14] <- "net_downward_shortwave_flux"
dimnames(observation$data30min)[14]
dimnames(observation$data30min)[[2]][14]
dimnames(observation$data30min)[[2]][14]<-"net_downward_shortwave_flux"
dimnames(observation$data30min)[[2]][15]<-"net_downward_longwave_flux"
dimnames(observation$dataDay)[[2]][14]
dimnames(observation$dataDay)[[2]][15]
dimnames(observation$data30min)[[1]][15]<-"net_downward_longwave_flux"
dimnames(observation$dataDay)[[2]][15]<-"net_downward_longwave_flux"
dimnames(observation$dataDay)[[2]][14]<-"net_downward_shortwave_flux"
dimnames(observation$dataDay)[[2]][14]
dimnames(observation$dataDay)[[2]][15]
dimnames(observation$data30min)[[2]][14]
dimnames(observation$data30min)[[2]][15]
save(list = "observation", file = "/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/MonaLisa/1D/Kaltern/sim006/obs/observation.RData")
load("/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/MonaLisa/1D/Kaltern/sim006/obs/observation.RData")
dimnames(observation$dataDay)[[2]][15]
