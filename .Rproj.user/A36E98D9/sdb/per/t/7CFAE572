{
    "contents" : "# Analysing GEOtop model output  \n# run Analysis of GEOtop simulation for multiple point output\n# plus validation on ET, SMC, Soil Temperature for specific stations (Mazia)\n# specific skript for simulations on Montecini stations (B, I & P)\n\n# ARGUMENTS\n  # path        path to simulation\n  # model_run   simulation folder\n  # station     output station names (Mazia)\n  # val_aggr    time aggregation \n  # read_data   should GEOtop output data be read? ELSE workspace points.RData\n  # calibration should calibration function for SMC data be applied\n  # use_swc_liq only use liquid SWC for validation\n  # lc_classes  names of landcover classes in simulation\n\nGEOtop_multiplePointPlot_Montecini <- function(path, model_run, stations, \n                                              val_aggr, read_data, calibration, use_swc_liq, soil_files,\n                                              lc_classes)\n{\n  # load libraries\n#   require(zoo)\n#   require(geotopbricks)\n#   require(hydroGOF)\n#   require(hydroTSM)\n#   require(ggplot2)\n#   require(soilwater)\n  \n  #  source functions 1\n  # source(\"H:/Projekte/HydroAlp/06_Workspace/BrJ/03_R/GEOtopAnalyse/FUN_GEOtopReadPoint.R\")\n  \n  # created path to model output  \n  wpath <- paste(path, model_run, sep=\"\")  \n  \n  #---------------------------------------------------------------------------------------------\n  \n#   #---- GEOtop .inpts  \n  fc_classes <- get.geotop.inpts.keyword.value(wpath=wpath, keyword = \"CanopyFraction\", numeric = T)\n#   \n#   # BUG only works with less than 10 output points\n# try\n  #point_character <- GEOtop_ReadPointVar(wpath = wpath, coordinates_value_df = TRUE, landcover_classes = lc_classes)  \n\n# get landcover class (either listpoint file or from point info)\n  lc <- read.table(paste(wpath,\"/listpoints.txt\", sep=\"\"), header=T, sep=\",\")$landcover  \n\n  fc <- c()\n  for (i in 1:length(lc)) fc[i] <- fc_classes[lc[i]]\n  names(fc) <- stations\n  \n  if (read_data) {\n    # reading data  \n    print(\"start reading point output data for the stations\")\n    print(stations)\n    \n    #---- METEOROLOGICAL VARIABLES    \n    print(\"-----METEOROLOGICAL VARIABLEs-----\")\n    # precipitation\n    print(\"... precipitation = snow + rain (over canopy)\") \n    snow_o_canopy <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\", \n                                     varOFint=c(\"Psnow_over_canopy.mm.\"))\n    rain_o_canopy <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                                     varOFint=c(\"Prain_over_canopy.mm.\"))\n    precipitation <- zoo(x=coredata(snow_o_canopy) + coredata(rain_o_canopy), order.by=time(snow_o_canopy))\n    \n    #----\n    # wind speed\n    print(\"... wind speed\")\n    wind_speed <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\", \n                                  varOFint=c(\"Wind_speed.m.s.\"))\n    #----\n    # relative humidity\n    print(\"... relative humidity\")\n    relative_humidity <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\", \n                                         varOFint=c(\"Relative_Humidity...\"))\n    #----\n    # atmospheric pressure\n    print(\"... atmospheric pressure\")\n    atm_pressure <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\", \n                                    varOFint=c(\"Pressure.mbar.\"))\n    #----  \n    # air temperature\n    print(\"... air temperature\")\n    airT <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\", \n                            varOFint=c(\"Tair.C.\"))\n    \n    #---- \n    # energy fluxes\n    print(\"-----ENERGY FLUXES-----\")\n    \n    print(\"... radiation components: short & long wave\")\n    #short wave\n    SWin <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                            varOFint=c(\"SWin.W.m2.\"))\n    SWup <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                            varOFint=c(\"SWup.W.m2.\"))\n    SWv <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                           varOFint=c(\"SWv.W.m2.\"))\n    SWbeam <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                              varOFint=c(\"SWbeam.W.m2.\"))\n    SWdiff <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                              varOFint=c(\"SWdiff.W.m2.\"))\n    SWnet <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                             varOFint=c(\"SWnet.W.m2.\"))\n    \n    #long wave\n    LWin <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                            varOFint=c(\"LWin.W.m2.\"))\n    LWup <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                            varOFint=c(\"LWup.W.m2.\"))\n    LWv <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                           varOFint=c(\"LWv.W.m2.\"))\n    LWnet <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                             varOFint=c(\"LWnet.W.m2.\"))\n    \n    #soil heat fluxes\n    print(\"... surface energy balance\")\n    SurfEB <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                              varOFint=c(\"Surface_Energy_balance.W.m2.\"))\n    SoilHeat <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                                varOFint=c(\"Soil_heat_flux.W.m2.\"))\n    \n    # latent heat LE\n    print(\"... latent heat components\")\n    LEv <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                           varOFint=c(\"LEv.W.m2.\"))\n    LEg_veg   <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                                 varOFint=c(\"LEg_veg.W.m2.\"))\n    LEg_unveg <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                                 varOFint=c(\"LEg_unveg.W.m2.\"))\n    \n    LE_soil <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                               varOFint=c(\"LE.W.m2.\"))\n    \n    # sensible heat H\n    print(\"... sensible heat\")\n    Hv <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                          varOFint=c(\"Hv.W.m2.\"))\n    Hg_veg   <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                                varOFint=c(\"Hg_veg.W.m2.\"))\n    Hg_unveg <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                                varOFint=c(\"Hg_unveg.W.m2.\"))\n    \n    H_soil  <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                               varOFint=c(\"H.W.m2.\"))  \n    \n    #---- WATER FLUXES\n    # evapotranspiration\n    print(\"-----WATER FLUXES-----\")\n    print(\"... evapotranspiration = evapo_surface + transpiration_canopy\")\n    evapo_surfac <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\", \n                                    varOFint=c(\"Evap_surface.mm.\"))\n    trans_canopy <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"PointOutputFile\",\n                                    varOFint=c(\"Trasp_canopy.mm.\"))  \n    evapotranspiration <- evapo_surfac + trans_canopy\n    \n    #---- WATER STORAGE \n    print(\"-----WATER STORAGE-----\")\n    \n    # soil water storage\n    # theta liquid/ice content\n    \n    if (soil_files) {\n      soil_input <- get.geotop.inpts.keyword.value(keyword=\"SoilParFile\", wpath=wpath, data.frame=TRUE)\n      soil_thickness <- soil_input[,1]\n    } else {\n      soil_thickness <- get.geotop.inpts.keyword.value(\"SoilLayerThicknesses\", numeric = T, wpath=wpath)\n    }\n\n    # output depth in mm\n    soil_head <- diff(c(0,cumsum(soil_thickness)))/2 + c(0,cumsum(soil_thickness))[-length(soil_thickness)-1]\n    \n    soil_header <- c()\n    for (i in 1:length(soil_head))\n    {\n      if (ceiling(soil_head[i])==soil_head[i]) {\n        soil_header[i] <- paste(\"X\", soil_head[i], \".000000\", sep=\"\")\n      } else {\n        soil_header[i] <- paste(\"X\", soil_head[i], \"00000\", sep=\"\")  }     \n    } \n    \n    print(\"... soil liquid content for all layers\")\n    soil_liq <- list()\n    for (i in soil_header)\n      soil_liq[[i]] <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"SoilLiqContentProfileFile\", \n                                       varOFint=c(i))\n    \n    #time_soil <- time(soil_liq[[1]])\n    #dummy <- matrix(unlist(soil_liq), nrow=length(time_soil))\n    \n    #coln <- c()\n    #for (i in soil_header) coln <- c(coln,paste(i,1:dim(soil_liq[[1]])[[2]],sep=\"_\"))\n    #colnames(dummy) <- coln\n    \n    #soil_liqu <- zoo(dummy, time_soil)\n    \n    print(\"... soil ice content for all layers\")\n    soil_ice <- list()\n    for (i in soil_header) \n      soil_ice[[i]] <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"SoilIceContentProfileFile\", \n                                       varOFint=c(i))\n     \n    #time_soil <- time(soil_ice[[1]])\n    #dummy <- matrix(unlist(soil_ice), nrow=length(time_soil))\n    \n    #coln <- c()\n    #for (i in soil_header) coln <- c(coln,paste(i,1:dim(soil_ice[[1]])[[2]],sep=\"_\"))\n    #colnames(dummy) <- coln\n    \n    #soil_ice <- zoo(dummy, time_soil)\n    \n    soil_moist <- list()\n    for (i in soil_header) soil_moist[[i]] <- soil_liq[[i]] + soil_ice[[i]]\n    #   \n    #   #----\n    #   # psi\n    #   print(\"... soil liquid water pressure for all layers\")\n    #   soil_liq_pressure <- list()\n    #   for (i in soil_header)\n    #     soil_liq_pressure[[i]] <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"SoilLiqWaterPressProfileFile\", \n    #                                               varOFint=c(i))\n    \n    #-----\n    # SOIL TEMPERATURE\n    print(\"... soil temperature for all layers\")\n    soil_temp <- list()\n    for (i in soil_header)\n      soil_temp[[i]] <- GEOtop_ReadPointVar(wpath=wpath, keyword=\"SoilAveragedTempProfileFile\", \n                                       varOFint=c(i))\n    \n    # all data in a list\n    data_list <- list(snow_o_canopy=snow_o_canopy, rain_o_canopy=rain_o_canopy, P=precipitation,\n                      airT=airT, WV=wind_speed, RH=relative_humidity, \n                      atmP=atm_pressure, SWin=SWin, LWin=LWin, SWnet=SWnet, LWnet=LWnet, LWin=LWin,\n                      SWbeam=SWbeam, SWdiff=SWdiff, SWup=SWup, LWup=LWup,\n                      LE_soil=LE_soil, H_soil=H_soil, SurfEB = SurfEB, SoilHeat = SoilHeat,\n                      Hv=Hv, LEv=LEv, Hg_veg=Hg_veg, LEg_veg=LEg_veg, Hg_unveg=Hg_unveg, LEg_unveg=LEg_unveg,\n                      ET=evapotranspiration, evapo_surfac=evapo_surfac, trans_canopy=trans_canopy)\n    \n    for (i in 1:length(soil_header)) \n    {\n      data_list[[paste(\"soil_ice\",soil_head[i],sep=\"_\")]] <- soil_ice[[i]]\n      data_list[[paste(\"soil_liq\",soil_head[i],sep=\"_\")]] <- soil_liq[[i]]\n      data_list[[paste(\"SWC\",soil_head[i],sep=\"_\")]] <- soil_moist[[i]]\n      #data_list[[paste(\"PSI\",soil_head[i],sep=\"_\")]] <- soil_liq_pressure[[i]]\n      data_list[[paste(\"soil_temp\",soil_head[i],sep=\"_\")]] <- soil_temp[[i]]\n    }\n    \n#     #----\n#     # soil parametrisation | texture | suction curves\n#     if (soil_files) {\n#       nr_soiltypes <- get.geotop.inpts.keyword.value(keyword = \"SoilLayerTypes\", wpath=wpath, numeric = T)\n#       soil_para <- get.geotop.inpts.keyword.value(keyword = \"SoilParFile\", wpath = wpath)\n#       \n#       soilfiles <- paste(soil_para, formatC(1:nr_soiltypes, width = 4, format = \"d\", flag = \"0\"), \".txt\", sep=\"\")\n#       \n#       soil_parameters <- list()\n#       for (sfile in soilfiles)\n#       {\n#         soil_parameters[[sfile]] <- read.csv(file.path(wpath,sfile), header = T)\n#       }\n#     } else {\n#       \n#     }\n\n    \n    #----\n    # merge data for each station\n    \n    #----\n    # station \n    list_station <- list()\n    for (i in 1:length(stations))\n    {\n      list_station[[stations[i]]] <- lapply( X = data_list, FUN = function(x) x[,i] )\n    }\n    \n    # read info for SWC input (measured data)\n    SWCinfo <- read.csv(file = \"H:/Projekte/HydroAlp/06_Workspace/BrJ/03_R/GEOtopAnalyse/SWCinfo.txt\")\n    \n    # save workspace\n    save(list = c(\"list_station\",\"SWCinfo\",\"soil_head\",\"soil_header\",\"wpath\",\"fc\"), \n         file = paste(wpath,\"/point.RData\",sep=\"\"))\n  } else {\n    print(\"start reading point output data from formerly saved workspace\")\n    load(file = paste(wpath,\"/point.RData\",sep=\"\"))\n  }\n  \n  print(\"all point data read in\")\n\n  # source functions 2\n  #source(\"H:/Projekte/HiResAlp/06_Workspace/BrJ/04_R_data_analyses/data_base/getSWC.R\")\n  #source(\"H:/Projekte/HiResAlp/06_Workspace/BrJ/04_R_data_analyses/data_base/getSoilTemp.R\")\n\n  for (i in stations)\n  { \n    \n    # latent and sensible heat over canopy\n    LE_overcanopy <- fc[i] * (list_station[[i]]$LEg_veg + list_station[[i]]$LEv) + (1-fc[i]) * list_station[[i]]$LEg_unveg\n    H_overcanopy  <- fc[i] * (list_station[[i]]$Hg_veg + list_station[[i]]$Hv) + (1-fc[i]) * list_station[[i]]$Hg_unveg\n    \n    meteo <- cbind(list_station[[i]]$airT, list_station[[i]]$P,  \n                   #list_station[[i]]$rain_o_canopy, \n                   list_station[[i]]$snow_o_canopy)\n    et <- cbind(list_station[[i]]$ET, list_station[[i]]$trans_canopy,\n                list_station[[i]]$evapo_surfac)\n    ETcumsum <- cbind(cumsum(list_station[[i]]$ET),cumsum(et[,2:3]))\n    radiation <- cbind(list_station[[i]]$SWin, list_station[[i]]$LWin,  \n                       list_station[[i]]$SWbeam, list_station[[i]]$SWdiff,\n                       list_station[[i]]$SWup, list_station[[i]]$LWup,\n                       list_station[[i]]$SWnet, list_station[[i]]$LWnet)\n    energy <- cbind(list_station[[i]]$LE_soil, list_station[[i]]$H_soil,\n                    list_station[[i]]$SurfEB, \n                    LE_overcanopy, H_overcanopy,\n                    list_station[[i]]$SoilHeat)\n    \n    swc_soilliq_labs <- paste(\"soil_liq_\", soil_head, sep=\"\")\n    swc_labs <- paste(\"SWC_\", soil_head, sep=\"\")\n    if (use_swc_liq) {\n      swc <- cbind(list_station[[i]][[swc_soilliq_labs[1]]], list_station[[i]][[swc_soilliq_labs[2]]])\n      for (n in 3:length(swc_soilliq_labs)) {\n        swc <- cbind(swc, list_station[[i]][[swc_soilliq_labs[n]]])\n      }\n      names(swc) <- swc_soilliq_labs\n#       swc <- cbind(list_station[[i]]$soil_liq_10, list_station[[i]]$soil_liq_50,  list_station[[i]]$soil_liq_200,\n#                        list_station[[i]]$soil_liq_560,list_station[[i]]$soil_liq_1400, list_station[[i]]$soil_liq_3500,\n#                        list_station[[i]]$soil_liq_7500, list_station[[i]]$soil_liq_16000, list_station[[i]]$soil_liq_36000)\n     } else {\n       swc <- cbind(list_station[[i]][[swc_labs[1]]], list_station[[i]][[swc_labs[2]]])\n       for (n in 3:length(swc_labs)) {\n         swc <- cbind(swc, list_station[[i]][[swc_labs[n]]])\n       }\n       names(swc) <- swc_labs\n#       swc <- cbind(list_station[[i]]$SWC_10, list_station[[i]]$SWC_50,  list_station[[i]]$SWC_200,\n#                    list_station[[i]]$SWC_560,list_station[[i]]$SWC_1400, list_station[[i]]$SWC_3500,\n#                    list_station[[i]]$SWC_7500, list_station[[i]]$SWC_16000, list_station[[i]]$SWC_36000)\n    }\n\n    soil_temp_labs <- paste(\"soil_temp_\", soil_head, sep=\"\")\n    soil_temp <- cbind(list_station[[i]][[soil_temp_labs[1]]], list_station[[i]][[soil_temp_labs[2]]])\n      for (n in 3:length(soil_temp_labs)) soil_temp <- cbind(soil_temp, list_station[[i]][[soil_temp_labs[n]]])  \n    names(soil_temp) <- soil_temp_labs\n\n    print(paste(\"start ploting station \", i, sep=\"\"))\n    \n    pdf(paste(wpath,\"/\",i, \"_\", val_aggr, \"_\", model_run, \".pdf\", sep=\"\"))\n    \n    # Meteorological Data\n    YsumsP <- aggregate(meteo[,\"list_station[[i]]$P\"], by = format(time(meteo),\"%Y\"), FUN = sum, na.rm=T)\n    YsumsS <- aggregate(meteo[,\"list_station[[i]]$snow_o_canopy\"], by = format(time(meteo),\"%Y\"), FUN = sum, na.rm=T)\n    \n    text <- c(\"YEAR: Precip (mm) | Snow (%)\", paste(time(YsumsS), \": \", round(YsumsP), \"|\", round(YsumsS/YsumsP*100), sep=\"\"))\n              \n    plot.zoo(meteo, ylab=c(\"Tair [°C]\", \"P [mm]\"), screens = c(1,2,2), main=paste(i, \" | Meteo\",sep=\"\"), \n             type=c(\"l\",\"h\",\"h\"), col=c(grey(.2,.5), rgb(0,0,.8,.5), \"grey80\"),\n             xlab=\"\", sub=\"x\")\n    text(x=0.25, y=0.52, labels = text[1], cex = 0.8)\n    for (t in 2:length(text)) text(x=0.15*(t-1), y=0.48, labels = text[t], cex = 0.8) \n    legend(x = 0.05, y = .45, legend = c(\"RAIN\", \"SNOW\"), col=c(rgb(0,0,.8,.5), grey(.2,.5)), lwd=3, bty = \"n\", horiz = T, )\n    # add yearly precip sum\n   \n    # Evapotranspiration\n    plot.zoo(et, ylab=c(\"mm\"), main=paste(i, \" | Evapotranspiration\",sep=\"\"), \n             type=c(\"h\",\"h\",\"h\"), screens = c(1,1,1), \n             col=c(grey(.2,.5), rgb(0,.8,0,.5), rgb(0,0,.8,.5)))\n    legend(\"topleft\", legend = c(\"ET\", \"E\", \"T\"), col=c(grey(.2,.5), rgb(0,.8,0,.5), rgb(0,0,.8,.5)), lwd=3, bty = \"n\")\n    \n    plot.zoo(ETcumsum, ylab=c(\"mm\"), main=paste(i, \" | Cumulated evapotranspiration\",sep=\"\"), \n             type=c(\"l\",\"l\",\"l\"), screens = c(1,1,1), lwd=3, \n             col=c(grey(.2,.5), rgb(0,.8,0,.5), rgb(0,0,.8,.5)))\n    legend(\"topleft\", legend = c(\"ET\", \"E\", \"T\"), col=c(grey(.2,.5), rgb(0,.8,0,.5), rgb(0,0,.8,.5)), lwd=3, bty = \"n\")\n    \n    # Add daily/monthly validation of ET (B2, P2)\n    \n    #ET to zoo \n    if (i == \"B2\" | i==\"I1\") \n    {\n      ET_B2 <- read.csv2(\"./validation_data/ET_B2.csv\", header=TRUE)\n      ET_B2 <- zoo(x=ET_B2$ET_mm_d, order.by=as.Date(x=ET_B2$date,format=\"%d.%m.%y\"))\n      \n      evapotrans <- list_station[[i]]$ET\n      \n      start_comp <- as.POSIXlt(head(time(ET_B2),1),tz=\"UTC\")\n      end_comp1  <- as.POSIXlt(tail(time(evapotrans),1),tz=\"UTC\")\n      end_comp2  <- as.POSIXlt(tail(time(ET_B2),1),tz=\"UTC\")\n      if (end_comp1 > end_comp2) end_comp <- end_comp2\n      if (end_comp1 < end_comp2) end_comp <- end_comp1\n      \n      ET_obs <- window(x=ET_B2, start=as.Date(start_comp), end=as.Date(end_comp))\n      evapotrans_d <- aggregate(evapotrans,as.Date(time(evapotrans),tz=\"UTC\"),sum)\n      ET_mod <- window(x=evapotrans_d, start=as.Date(start_comp), end=as.Date(end_comp))\n      \n      ET <- cbind(ET_obs, ET_mod)\n      ET_month <- aggregate(x=ET, by=as.yearmon(time(ET)), FUN=sum)\n      \n      # validation plots ET\n      plot(cumsum(ET), screens=c(1,1), type=\"l\", col=c(\"black\",\"grey\"), lwd=3, \n           main=paste(i, \" | Cumulated evapotranspiration\"), sep=\"\", ylab=\"mm\")\n      legend(\"bottomright\", legend=c(\"observed EddyCov\", \"simulated GEOtop\"), lwd=3, bty=\"n\", col=c(\"black\", \"grey\"))\n      plot(ET_month, screens=c(1,1), type=\"b\", pch=c(1,16), cex=2, lwd=3,\n           main=paste(i, \" | Monthly evapotranspiration sums\"), ylab=\"mm\", \n           col=c(\"black\", \"grey\"))\n      legend(\"bottomleft\", legend=c(\"observed EddyCov\", \"simulated GEOtop\"), cex=1.25, pch=c(1,16), bty=\"n\", col=c(\"black\", \"grey\"))\n      \n      ecdf_ET_obs <- ecdf(coredata(ET_obs))\n      ecdf_ET_mod <- ecdf(coredata(ET_mod))\n      \n      plot(ecdf_ET_mod, pch=16, cex=1, col=\"grey\", \n           main=paste(i,\" | ECDF Evapotranspiration\", sep=\"\"), xlab=\"ET [mm/d]\")\n      lines(ecdf_ET_obs, cex=1)\n      legend(\"bottomright\", cex=1.25, legend=c(\"simulated GEOtop\",\"observed EddyCov\"), col=c(\"grey\", \"black\"), pch=16, bty=\"n\")\n      \n      qqplot( coredata(ET_obs), coredata(ET_mod),\n              pch=16, cex=1, xlim=c(0,10), ylim=c(0,10),\n              xlab=\"observed EddyCov [mm/d]\", ylab=\"simulated GEOtop [mm/d]\", main=paste(i,\" | QQ Daily evapotranspiration sums\", sep=\"\"))\n      abline(0,1, lty=3, col=grey(.2,.5), lwd=2)\n      \n      ggof(sim=ET_mod, obs=ET_obs, ftype=\"o\", FUN=sum, ylab=\"ET [mm]\", \n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      \n      ggof(sim=ET_mod, obs=ET_obs, ftype=\"ma\", FUN=sum, ylab=\"ET [mm]\", \n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      \n      # analysis & visualisation of residuals\n      r <- ET_mod - ET_obs\n      hydroplot(r, FUN=sum, var.unit = \"mm\")\n      \n      # avaraged daily cycle ET sim vs obs\n      doy <- format(time(ET),\"%j\")\n      \n      ET_doy_mean <- aggregate(x = ET, by = list(doy), FUN = mean)\n      ET_doy_mean$r <- coredata(ET_doy_mean)[,2]-coredata(ET_doy_mean)[,1]\n      \n      plot.zoo(ET_doy_mean, screens = c(1,1,2), col=c(grey(.5,.5),rgb(1,0,0,.5),\"black\"), lwd=3,\n               main = paste(i, \" | Mean annual cycle evapotranspiration\", sep=\"\"), ylab=c(\"ET [mm]\", \"residuals [mm]\"))\n      legend(\"topright\", legend = c(\"simulated GEOtop\", \"observed EddyCov\"), col = c(rgb(1,0,0,.5),grey(.5,.5)), lwd=3, bty = \"n\")\n    }\n    \n    # Radiation\n    #plot.zoo(radiation)\n    \n    # Energy\n    plot.zoo(energy, main=paste(i, \" | Energy Budget\",sep=\"\"), \n             ylab = c(\"LE soil [W/m²]\", \"H soil [W/m²]\",  \"Surface E Balance [W/m²]\", \"LE over canopy [W/m²]\", \"H over canopy [W/m²]\", \"Soil Heat [W/m²]\"),\n             screens = c(1,2,3,4,5,6), type=c(\"h\",\"h\",\"h\",\"h\",\"h\",\"h\"), \n             col=c(rgb(0,0,.5,.5),rgb(.5,0,0,.5),grey(.8,.5),rgb(0,0,.5,.5),rgb(.5,0,0,.5),grey(.8,.5)))\n    #legend(\"bottomright\", legend = c(\"IN\", \"NET\"), col = c(grey(.6,.5),grey(.8,.5)), lwd=3, bty = \"n\")\n    \n    # add validation energy (P2)\n    # if (i == \"B2\" | i == \"I1\" | i == \"P2\") \n    if (i == \"B2\" | i == \"I1\") \n    {\n      # Energy fluxes to zoo\n      EnergyFluxes_df <- read.csv(\"./validation_data//EnergyFluxesVinschgau_I_2011_05-2014_04.csv\", na.strings=\"#N/A\")\n      EnergyFluxes <- zoo(x=EnergyFluxes_df[,c(2,3)], \n                          order.by=as.POSIXct(x=strptime(as.character(EnergyFluxes_df$Date_Time), format = \"%d/%m/%Y %H:%M\")))\n      EnergyFluxes <- EnergyFluxes[-which(is.na(time(EnergyFluxes))),]\n      EnergyFluxes_NAspline <- zoo(x = na.approx.default(EnergyFluxes, na.rm = FALSE), order.by = time(EnergyFluxes))\n      EnergyFluxes_daily <- aggregate(x = EnergyFluxes, by = as.Date(time(EnergyFluxes)), FUN = mean, na.rm=TRUE)\n      EnergyFluxes_NAspline_daily <- aggregate(x = EnergyFluxes_NAspline, by = as.Date(time(EnergyFluxes)), FUN = mean, na.rm=TRUE)\n      \n      LE_d <- aggregate(LE_overcanopy , by = as.Date(time(LE_overcanopy)), FUN = mean)\n      H_d  <- aggregate(H_overcanopy  , by = as.Date(time(H_overcanopy)) , FUN = mean)  \n      \n      start_comp <- as.POSIXlt(head(time(EnergyFluxes_daily),1),tz=\"UTC\")\n      end_comp1 <- as.POSIXlt(tail(time(LE_d),1),tz=\"UTC\")\n      end_comp2 <- as.POSIXlt(tail(time(EnergyFluxes_daily),1),tz=\"UTC\")\n      if (end_comp1 > end_comp2) end_comp <- end_comp2\n      if (end_comp1 < end_comp2) end_comp <- end_comp1\n      \n      Energy_obs <- window(x=EnergyFluxes_daily, start=as.Date(start_comp), end=as.Date(end_comp))\n      Energy_mod <- cbind( window(x=LE_d, start=as.Date(start_comp), end=as.Date(end_comp)), \n                           window(x=H_d , start=as.Date(start_comp), end=as.Date(end_comp)))\n      names(Energy_mod) <- names(Energy_obs) <- c(\"LE\", \"H\")\n      \n      \n      start_comp <- as.POSIXlt(head(time(EnergyFluxes_NAspline_daily),1),tz=\"UTC\")\n      end_comp1 <- as.POSIXlt(tail(time(LE_d),1),tz=\"UTC\")\n      end_comp2 <- as.POSIXlt(tail(time(EnergyFluxes_NAspline_daily),1),tz=\"UTC\")\n      if (end_comp1 > end_comp2) end_comp <- end_comp2\n      if (end_comp1 < end_comp2) end_comp <- end_comp1\n      \n      Energy_obs_naspl <- window(x=EnergyFluxes_NAspline_daily, start=as.Date(start_comp), end=as.Date(end_comp))\n      Energy_mod_naspl <- cbind( window(x=LE_d, start=as.Date(start_comp), end=as.Date(end_comp)), \n                                 window(x=H_d , start=as.Date(start_comp), end=as.Date(end_comp)))\n      names(Energy_mod_naspl) <- names(Energy_obs_naspl) <- c(\"LE\", \"H\")  \n      \n      # plots\n      ecdf_LE_obs <- ecdf(coredata(Energy_obs$LE))\n      ecdf_LE_mod <- ecdf(coredata(Energy_mod$LE))\n      ecdf_H_obs <- ecdf(coredata(Energy_obs$H))\n      ecdf_H_mod <- ecdf(coredata(Energy_mod$H))\n      \n      op <- par(mfrow=c(2,2), pty=\"s\")\n      \n      plot(ecdf_LE_mod, pch=16, cex=.3, col=\"grey\", xlab=\"LE [W/mm²]\",\n           main=paste(i, \" | ECDF LE\",  sep=\"\"))\n      lines(ecdf_LE_obs, cex=.3)\n      legend(\"topleft\", legend=c(\"simulated GEOtop\",\"observed EddyCov\"), \n             col=c(\"grey\", \"black\"), pch=16, bty=\"n\")\n      \n      qqplot( coredata(Energy_obs$LE), coredata(Energy_mod$LE),\n              pch=16, cex=.5, xlim=c(-100,250), ylim=c(-100,250),\n              xlab=\"obs EddyCov [W/m²]\", ylab=\"sim GEOtop [W/mm²]\", \n              main=paste(i, \" | QQ LE\", sep=\"\"))\n      abline(0,1, lty=3)\n      \n      plot(ecdf_H_mod, pch=16, cex=.3, col=\"grey\", xlab=\"H [W/mm²]\",\n           main=paste(i, \" | ECDF H\",  sep=\"\")) \n      lines(ecdf_H_obs, cex=.3)\n      legend(\"topleft\", legend=c(\"simulated GEOtop\",\"observed EddyCov\"), \n             col=c(\"grey\", \"black\"), pch=16, bty=\"n\")\n      \n      qqplot( coredata(Energy_obs$H), coredata(Energy_mod$H),\n              pch=16, cex=.5, xlim=c(-100,250), ylim=c(-100,250),\n              xlab=\"H obs [W/m²]\", ylab=\"H sim [W/mm²]\", \n              main=paste(i, \" | QQ H\", sep=\"\"))\n      abline(0,1, lty=3)\n      \n      par(op)\n      \n      ggof(sim=Energy_mod$LE, obs=Energy_obs$LE, ftype=\"o\", FUN=mean, ylab=\"LE [W/m²]\",\n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      ggof(sim=Energy_mod_naspl$LE, obs=Energy_obs_naspl$LE, ftype=\"o\", FUN=mean, ylab=\"LE [W/m²]\",\n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      \n      ggof(sim=Energy_mod$LE, obs=Energy_obs$LE, ftype=\"ma\", FUN=mean, ylab=\"LE [W/m²]\",\n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      ggof(sim=Energy_mod_naspl$LE, obs=Energy_obs_naspl$LE, ftype=\"ma\", FUN=mean, ylab=\"LE [W/m²]\",\n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      \n      residual_LE <- Energy_mod_naspl$LE- Energy_obs_naspl$LE\n      hydroplot(residual_LE, FUN=sum, var.unit = \"W/m²\")\n      \n      ggof(sim=Energy_mod$H, obs=Energy_obs$H, ftype=\"o\", FUN=mean, ylab=\"H [W/m²]\",\n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      ggof(sim=Energy_mod_naspl$H, obs=Energy_obs_naspl$H, ftype=\"o\", FUN=mean, ylab=\"H [W/m²]\",\n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      \n      ggof(sim=Energy_mod$H, obs=Energy_obs$H, ftype=\"ma\", FUN=mean, ylab=\"H [W/m²]\",\n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      ggof(sim=Energy_mod_naspl$H, obs=Energy_obs_naspl$H, ftype=\"ma\", FUN=mean, ylab=\"H [W/m²]\",\n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      \n      residual_H  <- Energy_mod_naspl$H - Energy_obs_naspl$H\n      hydroplot(residual_H, FUN=sum, var.unit = \"W/m²\")\n      \n    }\n    \n    \n    # Soil Water Content\n    plot.zoo(swc*100, main=paste(i, \" | Soil Water Content\"), ylim = c(0,max(swc*100, na.rm = T)),\n             ylab=paste(soil_head/1000,\"m [vol%]\",sep=\"\"))\n    \n    # read measured data\n    SWC <- dB_getSWC(path2files = as.character(SWCinfo[SWCinfo$STATION==i,2]), \n                  header.file = as.character(SWCinfo[SWCinfo$STATION==i,3]),\n                  station = as.character(SWCinfo[SWCinfo$STATION==i,4]), \n                  station_nr = as.integer(substr(SWCinfo[SWCinfo$STATION==i,1],2,2)),\n                  aggregation = val_aggr, calibration = calibration,\n                  minVALUE=.05, maxVALUE=.5, remove_freezing=TRUE)\n    \n#     SWCcalib <- getSWC(path2files = as.character(SWCinfo[SWCinfo$STATION==i,2]), \n#                   header.file = as.character(SWCinfo[SWCinfo$STATION==i,3]),\n#                   station = as.character(SWCinfo[SWCinfo$STATION==i,4]), \n#                   station_nr = as.integer(substr(SWCinfo[SWCinfo$STATION==i,1],2,2)),\n#                   aggregation = val_aggr, calibration = TRUE,\n#                   minVALUE=.05, maxVALUE=.5, remove_freezing=TRUE)\n    \n    # chron2posix\n    posTime <- as.POSIXct(time(SWC))\n    SWC <- zoo(coredata(SWC), posTime)\n    \n    # ?which sensors to use\n    # ?how to aggregate (functional boxplots / contour plots / mean +- range/sd)\n    \n    # for B stations choose sensors to use\n    # for P and I simply plot 3 sensors\n    if (i==\"B1\") sens2use <- c(T,F,T,F,F,T,F,F,F,F,F,T)\n    if (i==\"B2\") sens2use <- c(T,T,F,T,T,T,T,T,T,T,T,F,F,F,T,T,F,T,F,T,F,T,T)\n    if (i==\"B3\") sens2use <- c(T,T,T,F,T,T,T,T)\n    if (i==\"I1\" | i==\"P1\" | i==\"P2\" | i==\"P3\") sens2use <- rep(T,9)\n    if (i==\"I3\") sens2use <- rep(T,6)\n    \n      plot_ind <- c()\n      plot_ind[grep(\"z2\",names(SWC))] <- 1\n      plot_ind[grep(\"z5\",names(SWC))] <- 2\n      plot_ind[grep(\"z20\",names(SWC))] <- 3\n      \n      #plot_ind <- c(plot_ind, c(1,2,3))\n      \n    if (val_aggr==\"d\") soil_liq_d <- aggregate(swc, as.Date(time(swc)), mean)\n    # stay on hourly data\n    if (val_aggr==\"h\") soil_liq_d <- zoo(coredata(swc), as.POSIXct(time(swc)))\n      \n      # 20mm daily\n      soil_liq2 <- soil_liq_d[,which.min(abs(soil_head-20))]\n      # 50mm daily\n      soil_liq5 <- soil_liq_d[,which.min(abs(soil_head-50))]\n      # 200mm daily \n      soil_liq20 <-  soil_liq_d[,which.min(abs(soil_head-200))]\n      \n      rMeans_5 <- rowMeans(SWC[,sens2use & (plot_ind==2)], na.rm=T)\n      obs_mean_5cm <- zoo(rMeans_5, time(SWC))\n      \n      rMeans_20 <- rowMeans(SWC[,sens2use & (plot_ind==3)], na.rm=T)\n      obs_mean_20cm <- zoo(rMeans_20, time(SWC))\n    \n      if (i==\"B1\" | i==\"B2\" | i==\"B3\")\n      {\n        sd_5 <- apply(X=coredata(SWC[,sens2use & (plot_ind==2)]), MARGIN=1, FUN=sd, na.rm=T)\n        obs_sd_5cm <- zoo(sd_5, time(SWC))\n   \n        sd_20 <- apply(X=coredata(SWC[,sens2use & (plot_ind==3)]), MARGIN=1, FUN=sd, na.rm=T)\n        obs_sd_20cm <- zoo(sd_20, time(SWC))\n        \n        sd_data_5  <- merge(obs_mean_5cm, obs_sd_5cm, soil_liq5)\n        sd_data_20 <- merge(obs_mean_20cm, obs_sd_20cm, soil_liq20)\n     \n        percentINsd_5 <- sum(sd_data_5[,3]>=(sd_data_5[,1]-sd_data_5[,2]) & \n                               sd_data_5[,3]<=(sd_data_5[,1]+sd_data_5[,2]), na.rm=T)/length(rMeans_5)*100\n        percentINsd_20 <- sum(sd_data_20[,3]>=(sd_data_20[,1]-sd_data_20[,2]) & \n                                sd_data_20[,3]<=(sd_data_20[,1]+sd_data_20[,2]), na.rm=T)/length(rMeans_20)*100\n      \n        plot_data <- merge(SWC,soil_liq2,soil_liq5,soil_liq20)\n        sens2use_plot <- c(sens2use,c(T,T,T))\n        plot_ind_plot <- c(plot_ind,c(1,2,3))\n        \n      } else {\n        plot_data <- SWC\n        sens2use_plot <- sens2use\n        plot_ind_plot <- plot_ind\n      } \n  \n      plot(plot_data[,sens2use_plot], screens=plot_ind_plot[sens2use_plot], plot.type=\"multiple\", \n           ylim= c(0,0.6), lwd=.5,\n           ylab=c(\"2cm [10²vol%]\", \"5cm [10²vol%]\", \"20cm [10²vol%]\"), xlab=\"\",\n           main=paste(i, \" | Volumetric Water Content\",sep=\"\"),\n           panel=function(x,y,col=c(\"grey\"),...)\n           {\n             panel.number <- parent.frame()$panel.number\n             \n             if (panel.number==1) \n             {\n               if (i==\"B1\" | i==\"B2\" | i==\"B3\") {\n                 lines(x, y, col=rgb(0,0,1,.75),...)\n                 legend(\"bottomleft\", col=\"black\", bty=\"n\",\n                        legend=(c(\"percentage of SIM within sd of OBS\",\n                                  paste(\"5cm depth: \", round(percentINsd_5,1), \"%\", sep=\"\"),\n                                  paste(\"20cm depth: \", round(percentINsd_20,1), \"%\", sep=\"\"))))\n                } else {\n                  if (i==\"I1\" | i==\"P1\" | i==\"P2\" | i==\"P3\")\n                    lines(x, y, col=rgb(1,0,0,.75),...)\n                 #lines(x[1:length(coredata(soil_liq20))], coredata(soil_liq20), col=rgb(0,0,1,.5), lwd=1)\n                  \n                    lines(soil_liq2, col=rgb(0,0,1,.75), lwd=1)\n               }\n             }\n             \n             if (panel.number==2) \n             {\n               if (i==\"B1\" | i==\"B2\" | i==\"B3\")\n               {\n                 \n                 \n#                  rMeans <- rowMeans(SWC[,sens2use & (plot_ind==panel.number)], na.rm=T)\n#                  sd <- apply(X=coredata(SWC[,sens2use & (plot_ind==panel.number)]), MARGIN=1, FUN=sd, na.rm=TRUE)\n#                  noNA <- !is.na(sd)\n#                  sd <- sd[noNA]\n#                  rMeans <- rMeans[noNA]\n                 \n                 data_pan = plot_data[,sens2use_plot & plot_ind_plot==panel.number]\n                 \n                 rMeans <- apply(X=coredata(data_pan[,-grep(\"soil_liq\",names(data_pan))]), MARGIN=1, FUN=mean, na.rm=TRUE)\n                 sd <- apply(X=coredata(data_pan[,-grep(\"soil_liq\",names(data_pan))]), MARGIN=1, FUN=sd, na.rm=TRUE)\n                 noNA <- !is.na(sd)\n                 sd <- sd[noNA]\n                 rMeans <- rMeans[noNA]\n                 polygon(c(x[noNA],rev(x[noNA])),c(rMeans+sd,rev(rMeans-sd)),col=rgb(1,0,0,0.02), border=NA)        \n                 \n                 #lines(x[noNA],y[noNA],col=\"grey\",...)\n                 \n                 lines(x[noNA], rMeans, col=rgb(1,0,0,.75), lwd=1)   \n                 #lines(x[1:length(coredata(soil_liq5))], coredata(soil_liq5), col=rgb(0,0,1,.75), lwd=1.2)\n                 lines(soil_liq5, col=rgb(0,0,1,.75), lwd=1)\n                 \n               } else {\n                 lines(x,y,col=rgb(1,0,0,.75),...)\n                 #lines(x[1:length(coredata(soil_liq5))], coredata(soil_liq5), col=rgb(0,0,1,.5), lwd=1.2)\n                 lines(soil_liq5, col=rgb(0,0,1,.75), lwd=1)\n               }\n               \n             }\n             \n             if (panel.number==3)\n             {\n               if (i==\"B1\" | i==\"B2\" | i==\"B3\")\n               {\n#                  rMeans <- rowMeans(SWC[,sens2use & (plot_ind==panel.number)], na.rm=T)\n#                  sd <- apply(X=coredata(SWC[,sens2use & (plot_ind==panel.number)]), MARGIN=1, FUN=sd, na.rm=TRUE)\n#                  noNA <- !is.na(sd)\n#                  sd <- sd[noNA]\n#                  rMeans <- rMeans[noNA]\n                 data_pan = plot_data[,sens2use_plot & plot_ind_plot==panel.number]\n                 \n                 rMeans <- apply(X=coredata(data_pan[,-grep(\"soil_liq\",names(data_pan))]), MARGIN=1, FUN=mean, na.rm=TRUE)\n                 sd <- apply(X=coredata(data_pan[,-grep(\"soil_liq\",names(data_pan))]), MARGIN=1, FUN=sd, na.rm=TRUE)\n                 noNA <- !is.na(sd)\n                 sd <- sd[noNA]\n                 rMeans <- rMeans[noNA]\n                 polygon(c(x[noNA],rev(x[noNA])),c(rMeans+sd,rev(rMeans-sd)),col=rgb(1,0,0,0.02), border=NA)\n                 \n                 #lines(x[noNA],y[noNA], col=\"grey\",...)\n                 \n                 lines(x[noNA], rMeans, col=rgb(1,0,0,.75), lwd=1)\n                 \n                 #lines(x[1:length(coredata(soil_liq20))], coredata(soil_liq20), col=rgb(0,0,1,.75), lwd=1)\n                 lines(soil_liq20, col=rgb(0,0,1,.75), lwd=1)\n                 \n               } else {\n                 lines(x,y, rgb(1,0,0,.75),...)\n                # lines(x[1:length(coredata(soil_liq20))], coredata(soil_liq20), col=rgb(0,0,1,.5), lwd=1)\n                 lines(soil_liq20, col=rgb(0,0,1,.75), lwd=1)\n                 \n               }\n               \n               legend(\"bottomleft\", legend = c(\"OBS\", \"SIM\"), col=c(rgb(1,0,0,1),rgb(0,0,1,.5)), \n                      lwd=2, bty=\"n\")\n             }\n             \n           }) \n\n    # add gof\n    # 2cm\n     if (i==\"P1\" | i==\"P2\" | i==\"P3\" | i==\"I1\")\n     {\n       rMeans_2 <- rowMeans(SWC[,sens2use & (plot_ind==1)], na.rm=F)\n       obs_mean_2cm <- zoo(rMeans_2, time(SWC))\n       \n       swc2 <- merge(obs_mean_2cm,soil_liq2)\n       ggof(sim = swc2$soil_liq2, swc2$obs_mean_2cm,\n            ftype=\"o\", FUN=mean, ylab=\"VWC [10²vol%]\",\n            gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n     \n      rMeans_5 <- rowMeans(SWC[,sens2use & (plot_ind==2)], na.rm=F)\n       obs_mean_5cm <- zoo(rMeans_5, time(SWC))\n       \n       rMeans_20 <- rowMeans(SWC[,sens2use & (plot_ind==3)], na.rm=F)\n       obs0_mean_20cm <- zoo(rMeans_20, time(SWC))\n       \n       swc5 <- merge(obs_mean_5cm,soil_liq5)\n       ggof(sim = swc5$soil_liq5, obs = swc5$obs_mean_5cm,\n            ftype=\"o\", FUN=mean, ylab=\"VWC [10²vol%]\",\n            gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n       \n       swc20 <- merge(obs_mean_20cm,soil_liq20)\n       ggof(sim = swc20$soil_liq20, obs = swc20$obs_mean_20cm,\n            ftype=\"o\", FUN=mean, ylab=\"VWC [10²vol%]\",\n            gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n     }\n     if (i==\"I3\")\n     {\n       rMeans_5 <- rowMeans(SWC[,sens2use & (plot_ind==2)], na.rm=F)\n       obs_mean_5cm <- zoo(rMeans_5, time(SWC))\n       \n       rMeans_20 <- rowMeans(SWC[,sens2use & (plot_ind==3)], na.rm=F)\n       obs0_mean_20cm <- zoo(rMeans_20, time(SWC))\n       \n       swc5 <- merge(obs_mean_5cm,soil_liq5)\n       ggof(sim = swc5$soil_liq5, obs = swc5$obs_mean_5cm,\n            ftype=\"o\", FUN=mean, ylab=\"VWC [10²vol%]\",\n            gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n       \n       swc20 <- merge(obs_mean_20cm,soil_liq20)\n       ggof(sim = swc20$soil_liq20, obs = swc20$obs_mean_20cm,\n            ftype=\"o\", FUN=mean, ylab=\"VWC [10²vol%]\",\n            gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n     }\n     if (i==\"B1\" | i==\"B2\" | i==\"B3\")\n     {\n       # 5cm\n       swc5 <- merge(obs_mean_5cm,soil_liq5)\n       ggof(sim = swc5$soil_liq5, obs = swc5$obs_mean_5cm,\n            ftype=\"o\", FUN=mean, ylab=\"VWC [10²vol%]\",\n            gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n       if (val_aggr==\"d\")\n       ggof(sim = swc5$soil_liq5, obs = swc5$obs_mean_5cm,\n            ftype=\"dm\", FUN=mean, ylab=\"VWC [10²vol%]\",\n            gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n       # 20cm\n       swc20 <- merge(obs_mean_20cm,soil_liq20)\n       ggof(sim = swc20$soil_liq20, obs = swc20$obs_mean_20cm,\n                 ftype=\"o\", FUN=mean, ylab=\"VWC [10²vol%]\",\n                 gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n       if (val_aggr==\"d\")\n       ggof(sim = swc20$soil_liq20, obs = swc20$obs_mean_20cm,\n                 ftype=\"dm\", FUN=mean, ylab=\"VWC [10²vol%]\",\n                 gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))  \n     }\n\n# soil temperature\n    SoilTempObs <- dB_getSoilTemp(path2files = as.character(SWCinfo[SWCinfo$STATION==i,2]), \n                       header.file = as.character(SWCinfo[SWCinfo$STATION==i,3]),\n                       station = as.character(SWCinfo[SWCinfo$STATION==i,4]), \n                       station_nr = as.integer(substr(SWCinfo[SWCinfo$STATION==i,1],2,2)),\n                       aggregation = val_aggr,\n                       minVALUE=-30, maxVALUE=30)\n\n    if (i==\"B2\") sens2use <- c(F,T,T,F,T,F,T,T,T,T)\n    if (i==\"P2\") sens2use <- rep(T,9)\n    SoilTempObs <- SoilTempObs[,sens2use]\n\n    # chron2posix\n    posTime <- as.POSIXct(time(SoilTempObs))\n    SoilTempObs <- zoo(coredata(SoilTempObs), posTime)\n\n    if (val_aggr==\"d\") soil_temp_d <- aggregate(soil_temp, as.Date(time(soil_temp)), mean)\n    # stay on hourly data\n    if (val_aggr==\"h\") soil_temp_d <- zoo(coredata(soil_temp), as.POSIXct(time(soil_temp)))\n    \n    if (i == \"B2\")\n    {\n      # 0mm\n      soil_temp0_sim  <- soil_temp_d[,which.min(abs(soil_head-0))]\n      grep <- grep(\"_z0\", names(SoilTempObs))\n      if (length(grep)==1) soil_temp0_obs <- zoo(SoilTempObs[,grep], time(SoilTempObs)) else \n        soil_temp0_obs <- zoo(rowMeans(SoilTempObs[,grep], na.rm=T), time(SoilTempObs))\n      # 100mm \n      soil_temp10_sim <-  soil_temp_d[,which.min(abs(soil_head-100))]\n      grep <- grep(\"_z10\", names(SoilTempObs))\n      if (length(grep)==1) soil_temp10_obs <- zoo(SoilTempObs[,grep], time(SoilTempObs)) else \n        soil_temp10_obs <- zoo(rowMeans(SoilTempObs[,grep], na.rm=T), time(SoilTempObs))\n      # 500mm \n      soil_temp50_sim <-  soil_temp_d[,which.min(abs(soil_head-500))]\n      grep <- grep(\"_z50\", names(SoilTempObs))\n      if (length(grep)==1) soil_temp50_obs <- zoo(SoilTempObs[,grep], time(SoilTempObs)) else \n        soil_temp50_obs <- zoo(rowMeans(SoilTempObs[,grep], na.rm=T), time(SoilTempObs))\n    }\n\n    if (i == \"P2\")\n    {\n      # 20mm\n      soil_temp2_sim  <- soil_temp_d[,which.min(abs(soil_head-20))]\n      grep <- grep(\"_z2_\", names(SoilTempObs))\n      if (length(grep)==1) soil_temp2_obs <- zoo(SoilTempObs[,grep], time(SoilTempObs)) else \n        soil_temp2_obs <- zoo(rowMeans(SoilTempObs[,grep], na.rm=T), time(SoilTempObs))\n    }\n\n      # 50mm\n      soil_temp5_sim  <- soil_temp_d[,which.min(abs(soil_head-50))]\n      # 200mm \n      soil_temp20_sim <-  soil_temp_d[,which.min(abs(soil_head-200))]\n    \n   if (i==\"B2\") {\n     only5 <- !grep(\"_z5\", names(SoilTempObs))%in%grep(\"_z50\", names(SoilTempObs))\n     grep <- grep(\"_z5\", names(SoilTempObs))[only5]\n   }\n\n   if (i==\"P2\") {\n     grep <- grep(\"_z5_\", names(SoilTempObs))\n   }\n    if (length(grep)==1) soil_temp5_obs <- zoo(SoilTempObs[,grep], time(SoilTempObs)) else \n      soil_temp5_obs <- zoo(rowMeans(SoilTempObs[,grep], na.rm=T), time(SoilTempObs))\n\n    grep <- grep(\"_z20\", names(SoilTempObs))\n    if (length(grep)==1) soil_temp20_obs <- zoo(SoilTempObs[,grep], time(SoilTempObs)) else \n      soil_temp20_obs <- zoo(rowMeans(SoilTempObs[,grep], na.rm=T), time(SoilTempObs))\n\n    if (i==\"B2\") {\n      # 0cm\n      soil_temp0 <- merge(soil_temp0_sim,soil_temp0_obs)\n      ggof(sim = soil_temp0$soil_temp0_sim, obs = soil_temp0$soil_temp0_obs,\n           ftype=\"o\", FUN=mean, ylab=\"soilT [degC]\",\n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      if (val_aggr==\"d\")\n        ggof(sim = soil_temp0$soil_temp0_sim, obs = soil_temp0$soil_temp0_obs,\n             ftype=\"dm\", FUN=mean, ylab=\"soilT [degC]\",\n             gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      \n      # 5cm\n      soil_temp5 <- merge(soil_temp5_sim,soil_temp5_obs)\n      ggof(sim = soil_temp5$soil_temp5_sim, obs = soil_temp5$soil_temp5_obs,\n           ftype=\"o\", FUN=mean, ylab=\"soilT [degC]\",\n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      if (val_aggr==\"d\")\n        ggof(sim = soil_temp5$soil_temp5_sim, obs = soil_temp0$soil_temp5_obs,\n             ftype=\"dm\", FUN=mean, ylab=\"soilT [degC]\",\n             gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      \n      #10cm\n      soil_temp10 <- merge(soil_temp10_sim,soil_temp10_obs)\n      ggof(sim = soil_temp10$soil_temp10_sim, obs = soil_temp10$soil_temp10_obs,\n           ftype=\"o\", FUN=mean, ylab=\"soilT [degC]\",\n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      if (val_aggr==\"d\")\n        ggof(sim = soil_temp10$soil_temp10_sim, obs = soil_temp10$soil_temp10_obs,\n             ftype=\"dm\", FUN=mean, ylab=\"soilT [degC]\",\n             gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      \n      # 20cm\n      soil_temp20 <- merge(soil_temp20_sim,soil_temp20_obs)\n      ggof(sim = soil_temp20$soil_temp20_sim, obs = soil_temp20$soil_temp20_obs,\n           ftype=\"o\", FUN=mean, ylab=\"soilT [degC]\",\n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      if (val_aggr==\"d\")\n        ggof(sim = soil_temp20$soil_temp20_sim, obs = soil_temp20$soil_temp20_obs,\n             ftype=\"dm\", FUN=mean, ylab=\"soilT [degC]\",\n             gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      \n      # 50cm\n      soil_temp50 <- merge(soil_temp50_sim,soil_temp50_obs)\n      ggof(sim = soil_temp50$soil_temp50_sim, obs = soil_temp50$soil_temp50_obs,\n           ftype=\"o\", FUN=mean, ylab=\"soilT [degC]\",\n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      if (val_aggr==\"d\")\n        ggof(sim = soil_temp50$soil_temp50_sim, obs = soil_temp50$soil_temp50_obs,\n             ftype=\"dm\", FUN=mean, ylab=\"soilT [degC]\",\n             gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n    }\n\n    if (i==\"P2\") {\n      # 2cm\n      soil_temp2 <- merge(soil_temp2_sim,soil_temp2_obs)\n      ggof(sim = soil_temp2$soil_temp2_sim, obs = soil_temp2$soil_temp2_obs,\n           ftype=\"o\", FUN=mean, ylab=\"soilT [degC]\",\n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      if (val_aggr==\"d\")\n        ggof(sim = soil_temp2$soil_temp2_sim, obs = soil_temp2$soil_temp2_obs,\n             ftype=\"dm\", FUN=mean, ylab=\"soilT [degC]\",\n             gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      \n      # 5cm\n      soil_temp5 <- merge(soil_temp5_sim,soil_temp5_obs)\n      ggof(sim = soil_temp5$soil_temp5_sim, obs = soil_temp5$soil_temp5_obs,\n           ftype=\"o\", FUN=mean, ylab=\"soilT [degC]\",\n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      if (val_aggr==\"d\")\n        ggof(sim = soil_temp5$soil_temp5_sim, obs = soil_temp0$soil_temp5_obs,\n             ftype=\"dm\", FUN=mean, ylab=\"soilT [degC]\",\n             gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      \n      # 20cm\n      soil_temp20 <- merge(soil_temp20_sim,soil_temp20_obs)\n      ggof(sim = soil_temp20$soil_temp20_sim, obs = soil_temp20$soil_temp20_obs,\n           ftype=\"o\", FUN=mean, ylab=\"soilT [degC]\",\n           gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n      if (val_aggr==\"d\")\n        ggof(sim = soil_temp20$soil_temp20_sim, obs = soil_temp20$soil_temp20_obs,\n             ftype=\"dm\", FUN=mean, ylab=\"soilT [degC]\",\n             gofs = c(\"MAE\", \"RMSE\", \"NRMSE\", \"NSE\", \"PBIAS\"))\n    }\n\n    dev.off()\n    \n    print(paste(\"end ploting station \", i, sep=\"\"))\n    print(paste(\"PDF \", paste(wpath,\"/\",i, \"_\", model_run, \".pdf\", sep=\"\"), \" created\", sep=\"\"))\n  }\n  \n}\n",
    "created" : 1428668014517.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1128257844",
    "id" : "7CFAE572",
    "lastKnownWriteTime" : 1428669425,
    "path" : "~/GitHub/AnalyseGEOtop/R/GEOtop_multiplePointPlot_Montecini.R",
    "project_path" : "R/GEOtop_multiplePointPlot_Montecini.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}